##
# This script includes generic build options:
#    release/debug, target os, target arch, cross toolchain, build environment etc
##
import os
import platform
import setup.targets
import build.utils

Import('env')
# env = Environment(variables = hvars,
#       ENV = os.environ)
# Help(hvars.GenerateHelpText(env))

target_os = env.get('TARGET_OS')

from os.path import expanduser
home = expanduser("~")

# Map of host os and allowed target os (host: allowed target os)
host_target_map = {
		'linux': ['android', 'arduino', 'poky-edison', 'linux', 'tizen','yocto'],
		'windows': ['windows', 'android', 'arduino'],
		'darwin': ['darwin', 'ios', 'android', 'arduino', 'poky-edison'],
		'msys_nt' :['msys_nt'],
		}

# Map of os and allowed archs (os: allowed archs)
os_arch_map = {
		'poky-edison': ['x86', 'i686'],
		'linux': ['x86', 'x86_64', 'arm', 'arm-v7a', 'arm64'],
		'tizen': ['x86', 'x86_64', 'arm', 'arm-v7a', 'armeabi-v7a', 'arm64'],
		'android': ['x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'armeabi-v7a-hard', 'arm64-v8a'],
		'windows': ['x86', 'amd64', 'arm'],
		'msys_nt':['x86', 'x86_64'],
		'darwin': ['i386', 'x86_64'],
		'ios': ['i386', 'x86_64', 'armv7', 'armv7s', 'arm64'],
		'arduino': ['avr', 'arm'],
		'yocto': ['i586', 'i686', 'x86_64', 'arm', 'powerpc', 'powerpc64', 'mips', 'mipsel'],
		}

host = platform.system().lower()

# the host string contains version of windows. 6.3, 6.4, 10.0 which is 8.0, 8.1, and 10 respectively.
# Let's canonicalize the msys_nt-XX.X system name by stripping version off.
if 'msys_nt' in host:
	host = 'msys_nt'

if not host_target_map.has_key(host):
	print "\nError: Current system (%s) isn't supported\n" % host
	Exit(1)

######################################################################
# Get build options (the optins from command line)
######################################################################
# target_os = ARGUMENTS.get('TARGET_OS', host).lower() # target os

if target_os not in host_target_map[host]:
	print "\nError: UNKNOWN target os: %s (Allow values: %s)\n" % (target_os, host_target_map[host])
	Exit(1)

if target_os == 'android':
	default_arch = 'x86'
else:
	default_arch = platform.machine()

if default_arch not in os_arch_map[target_os]:
	default_arch = os_arch_map[target_os][0].lower()

#target_arch = ARGUMENTS.get('TARGET_ARCH', default_arch) # target arch
#target_arch = env.get('TARGET_ARCH')

################################################################
#GAR: ARDUINO ONLY
# True if binary needs to be installed on board. (Might need root permissions)
# set to 'no', 'false' or 0 for only compilation
# require_upload = ARGUMENTS.get('UPLOAD', False)

# Get the device name. This name can be used as network display name wherever possible
# device_name = ARGUMENTS.get('DEVICE_NAME', "OIC-DEVICE")
################################################################

if ARGUMENTS.get('TEST'):
	logging_default = False
else:
	release_mode = False
	if ARGUMENTS.get('RELEASE', True) in ['y', 'yes', 'true', 't', '1', 'on', 'all', True]:
		release_mode = True
	logging_default = (release_mode == False)

######################################################################
# Common build options (release, target os, target arch)
######################################################################
targets_disallow_multitransport = ['arduino']

# help_vars = Variables()
# help_vars.Add(BoolVariable('VERBOSE', 'Show compilation', False))
# help_vars.Add(BoolVariable('RELEASE', 'Build for release?', True)) # set to 'no', 'false' or 0 for debug
# help_vars.Add(EnumVariable('TARGET_OS', 'Target platform', host, host_target_map[host]))


# help_vars.Add(BoolVariable('WITH_RA', 'Build with Remote Access module', False))
# help_vars.Add(BoolVariable('WITH_TCP', 'Build with TCP adapter', False))
# help_vars.Add(ListVariable('WITH_MQ', 'Build with MQ publisher/broker', 'OFF', ['OFF', 'SUB', 'PUB', 'BROKER']))
# help_vars.Add(BoolVariable('WITH_CLOUD', 'Build including Cloud Connector and Cloud Client sample', False))
# help_vars.Add(ListVariable('RD_MODE', 'Resource Directory build mode', 'CLIENT', ['CLIENT', 'SERVER']))

# help_vars.Add(BoolVariable('SIMULATOR', 'Build with simulator module', False))

# help_vars.Add(BoolVariable('WITH_RA_IBB', 'Build with Remote Access module(workssys)', False))


# if target_os in targets_disallow_multitransport:
# 	help_vars.Add(ListVariable('TARGET_TRANSPORT', 'Target transport', 'IP', ['BT', 'BLE', 'IP', 'NFC']))
# else:
# 	help_vars.Add(ListVariable('TARGET_TRANSPORT', 'Target transport', 'ALL', ['ALL', 'BT', 'BLE', 'IP', 'NFC']))

# help_vars.Add(EnumVariable('TARGET_ARCH', 'Target architecture', default_arch, os_arch_map[target_os]))
# help_vars.Add(EnumVariable('SECURED', 'Build with DTLS', '0', allowed_values=('0', '1')))
# help_vars.Add(EnumVariable('DTLS_WITH_X509', 'DTLS with X.509 support', '0', allowed_values=('0', '1')))
# help_vars.Add(EnumVariable('TEST', 'Run unit tests', '0', allowed_values=('0', '1')))
# help_vars.Add(BoolVariable('LOGGING', 'Enable stack logging', logging_default))
# help_vars.Add(BoolVariable('UPLOAD', 'Upload binary ? (For Arduino)', require_upload))
# help_vars.Add(EnumVariable('ROUTING', 'Enable routing', 'EP', allowed_values=('GW', 'EP')))
# help_vars.Add(EnumVariable('BUILD_SAMPLE', 'Build with sample', 'ON', allowed_values=('ON', 'OFF')))
# help_vars.AddVariables(('DEVICE_NAME', 'Network display name for device (For Arduino)', device_name, None, None),)
# help_vars.Add(PathVariable('ANDROID_NDK', 'Android NDK path', None, PathVariable.PathAccept))
# help_vars.Add(PathVariable('ANDROID_HOME', 'Android SDK path', None, PathVariable.PathAccept))
# #ES_TARGET_ENROLLEE is for specifying what is our target enrollee (Arduino or rest of platforms which support Multicast)
# help_vars.Add(EnumVariable('ES_TARGET_ENROLLEE', 'Target Enrollee', 'arduino', allowed_values=('arduino', 'tizen', 'linux', 'darwin')))
# #ES_ROLE is for specifying the role (Enrollee or Mediator) for which scons is being executed
# help_vars.Add(EnumVariable('ES_ROLE', 'Target build mode', 'mediator', allowed_values=('mediator', 'enrollee')))
# #ES_SOFT_MODE is for specifying MODE (Mode 1 : Enrollee with  Soft AP or Mode 2  : Mediator with Soft AP)
# help_vars.Add(EnumVariable('ES_SOFTAP_MODE', 'Target build mode', 'ENROLLEE_SOFTAP', allowed_values=('ENROLLEE_SOFTAP', 'MEDIATOR_SOFTAP')))

AddOption('--prefix',
                  dest='prefix',
                  type='string',
                  nargs=1,
                  action='store',
                  metavar='DIR',
                  help='installation prefix')

######################################################################
# Platform(build target) specific options: SDK/NDK & toolchain
######################################################################
targets_support_cc = ['darwin', 'linux', 'arduino', 'tizen']

# if target_os in targets_support_cc:
# 	# Set cross compile toolchain

# 	help_vars.Add('TC_PREFIX', "Toolchain prefix (Generally only be required for cross-compiling)", os.environ.get('TC_PREFIX'))

# 	help_vars.Add(PathVariable('TC_PATH',
# 			'Toolchain path (Generally only be required for cross-compiling)',
# 			os.environ.get('TC_PATH')))

# if target_os in ['android', 'arduino']: # Android/Arduino always uses GNU compiler regardless of the host
# 	env = Environment(variables = help_vars,
# 			tools = ['gnulink', 'gcc', 'g++', 'ar', 'as', 'textfile']
# 			)
# else:
# 	env = Environment(variables = help_vars, tools = ['default', 'textfile'],
# 			TARGET_ARCH = target_arch, TARGET_OS = target_os,
# 			PREFIX = GetOption('prefix'),
# 			LIB_INSTALL_DIR = ARGUMENTS.get('LIB_INSTALL_DIR'), #for 64bit build
# 			ENV = os.environ)

tc_set_msg = '''
************************************ Warning **********************************
*   Enviornment variable TC_PREFIX/TC_PATH is set. It will change the default *
* toolchain, if it isn't what you expect you should unset it, otherwise it may*
* cause inexplicable errors.                                                  *
*******************************************************************************
'''
if env.get('VERBOSE') == False:
	env['CCCOMSTR'] = "Compiling $TARGET"
	env['SHCCCOMSTR'] = "Compiling $TARGET"
	env['CXXCOMSTR'] = "Compiling $TARGET"
	env['SHCXXCOMSTR'] = "Compiling $TARGET"
	env['LINKCOMSTR'] = "Linking $TARGET"
	env['SHLINKCOMSTR'] = "Linking $TARGET"
	env['ARCOMSTR'] = "Archiving $TARGET"
	env['RANLIBCOMSTR'] = "Indexing Archive $TARGET"

if target_os in targets_support_cc:
	prefix = env.get('TC_PREFIX')
	tc_path = env.get('TC_PATH')
	if prefix:
		env.Replace(CC = prefix + env.get('CC', 'gcc'))
		env.Replace(CXX = prefix + env.get('CXX', 'g++'))
		env.Replace(AR = prefix + env.get('AR', 'ar'))
		env.Replace(AS = prefix + env.get('AS', 'as'))
		env.Replace(RANLIB = prefix + env.get('RANLIB', 'ranlib'))

	if tc_path:
		env.PrependENVPath('PATH', tc_path)
		sys_root = os.path.abspath(tc_path + '/../')
		env.AppendUnique(CCFLAGS = ['--sysroot=' + sys_root])
		env.AppendUnique(LINKFLAGS = ['--sysroot=' + sys_root])

	if prefix or tc_path:
		print tc_set_msg

if not env.get('RELEASE'):
	env.AppendUnique(CPPDEFINES = ['TB_LOG'])

# If cross-compiling, honor environment settings for toolchain to avoid picking up native tools
if os.environ.get('PKG_CONFIG') != None:
	env["ENV"]["PKG_CONFIG"] = os.environ.get("PKG_CONFIG")
if os.environ.get('PKG_CONFIG_PATH') != None:
	env["ENV"]["PKG_CONFIG_PATH"] = os.environ.get("PKG_CONFIG_PATH")
if os.environ.get('PKG_CONFIG_SYSROOT_DIR') != None:
	env["ENV"]["PKG_CONFIG_SYSROOT_DIR"] = os.environ.get("PKG_CONFIG_SYSROOT_DIR")

# Ensure scons be able to change its working directory
env.SConscriptChdir(1)

# Set the source directory and build directory
#   Source directory: 'dir'
#   Build directory: 'dir'/out/<target_os>/<target_arch>/<release or debug>/
#
# You can get the directory as following:
#   env.get('SRC_DIR')
#   env.get('BUILD_DIR')

env = build.utils.SetDir(env)

env['ROOT_DIR']=env.GetLaunchDir()+'/..'

debug = ARGUMENTS.get('debug', 0)
#if int(debug) and debug > 2:
# print "ENV:"
# print env.Dump()

Export('env')

# ######################################################################
# # Scons to generate the iotivity.pc file from iotivity.pc.in file
# ######################################################################
# pc_file = env.get('SRC_DIR') + 'etc/iotivity.pc.in'

# if env.get('ROUTING') == 'GW':
# 	routing_define = 'ROUTING_GATEWAY'
# elif env.get('ROUTING') == 'EP':
# 	routing_define = 'ROUTING_EP'

# user_prefix = env.get('PREFIX')
# user_lib = env.get('LIB_INSTALL_DIR')
# if not user_lib:
# 	user_lib = '$${prefix}/lib'

# if user_prefix:
# 	pc_vars = {'\@PREFIX\@': user_prefix,
# 				'\@EXEC_PREFIX\@':user_prefix,
# 				'\@VERSION\@': '1.1.1',
# 				'\@LIB_INSTALL_DIR\@': user_lib,
# 				'\@ROUTING_DEFINE\@': routing_define
# 				}
# else:
# 	pc_vars = {'\@PREFIX\@': env.get('BUILD_DIR').encode('string_escape'),
# 				'\@EXEC_PREFIX\@': env.get('BUILD_DIR').encode('string_escape'),
# 				'\@VERSION\@': '1.1.1',
# 				'\@LIB_INSTALL_DIR\@': user_lib,
# 				'\@ROUTING_DEFINE\@': routing_define
# 				}

# env.Substfile(pc_file, SUBST_DICT = pc_vars)

######################################################################
# Link scons to Yocto cross-toolchain ONLY when target_os is yocto
######################################################################
env.AppendUnique(CPPFLAGS = ['-fPIC', '-Wall', '-Wextra', '-Wpedantic']) #, '-Wno-unused'])

# if target_os == 'darwin':
#     env.AppendUnique(CPPFLAGS = ['-Wl,--undefined,error'])
# else:
#     env.AppendUnique(CPPFLAGS = ['-Wl,--no-undefined'])

if target_os == "yocto":
    '''
    This code injects Yocto cross-compilation tools+flags into scons'
    build environment in order to invoke the relevant tools while
    performing a build.
    '''
    import os.path
    try:
        CC = os.environ['CC']
        target_prefix = CC.split()[0]
        target_prefix = target_prefix[:len(target_prefix)-3]
        tools = {"CC" : target_prefix+"gcc",
                "CXX" : target_prefix+"g++",
                "AS" : target_prefix+"as",
                "LD" : target_prefix+"ld",
                "GDB" : target_prefix+"gdb",
                "STRIP" : target_prefix+"strip",
                "RANLIB" : target_prefix+"ranlib",
                "OBJCOPY" : target_prefix+"objcopy",
                "OBJDUMP" : target_prefix+"objdump",
                "AR" : target_prefix+"ar",
                "NM" : target_prefix+"nm",
                "M4" : "m4",
                "STRINGS": target_prefix+"strings"}
        PATH = os.environ['PATH'].split(os.pathsep)
        for tool in tools:
            if tool in os.environ:
                for path in PATH:
                    if os.path.isfile(os.path.join(path, tools[tool])):
                        env[tool] = os.path.join(path, os.environ[tool])
                        break
        env['CROSS_COMPILE'] = target_prefix[:len(target_prefix) - 1]
    except:
        print "ERROR in Yocto cross-toolchain environment"
        Exit(1)
    '''
    Now reset TARGET_OS to linux so that all linux specific build configurations
    hereupon apply for the entirety of the build process.
    '''
    env['TARGET_OS'] = 'linux'
    '''
    We want to preserve debug symbols to allow BitBake to generate both DEBUG and
    RELEASE packages for OIC.
    '''
    env.AppendUnique(CCFLAGS = ['-g'])
    '''
    Additional flags to pass to the Yocto toolchain.
    '''
    if env.get('RELEASE'):
        env.AppendUnique(CPPDEFINES = ['NDEBUG'])
    if env.get('LOGGING'):
        env.AppendUnique(CPPDEFINES = ['TB_LOG'])
    env.AppendUnique(CPPDEFINES = ['WITH_POSIX', '__linux__', '_GNU_SOURCE'])
    env.AppendUnique(LIBS = ['dl', 'pthread', 'uuid'])

    Export('env')
else:
    '''
    If target_os is not Yocto, continue with the regular build process
    '''
    # Load config of target os
    env.SConscript(target_os + '/SConscript')

# Delete the temp files of configuration
if env.GetOption('clean'):
	dir = env.get('SRC_DIR')

	if os.path.exists(dir + '/config.log'):
		Execute(Delete(dir + '/config.log'))
	if os.path.exists(dir + '/.sconsign.dblite'):
		Execute(Delete(dir + '/.sconsign.dblite'))
	if os.path.exists(dir + '/.sconf_temp'):
		Execute(Delete(dir + '/.sconf_temp'))

######################################################################

env.SConscript('external_libs.scons')
Return('env')

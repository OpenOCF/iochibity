/*
 * //******************************************************************
 * //
 * // Copyright 2015 Intel Corporation.
 * //
 * //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 * //
 * // Licensed under the Apache License, Version 2.0 (the "License");
 * // you may not use this file except in compliance with the License.
 * // You may obtain a copy of the License at
 * //
 * //      http://www.apache.org/licenses/LICENSE-2.0
 * //
 * // Unless required by applicable law or agreed to in writing, software
 * // distributed under the License is distributed on an "AS IS" BASIS,
 * // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * // See the License for the specific language governing permissions and
 * // limitations under the License.
 * //
 * //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
 */


apply plugin: 'java'

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', '../common/src/main/java'
	    // output  'build'
        }
	// manifest.srcFile 'src/main/iotivity.mf'
    }
    task buildNative(type: Exec, description: 'Compile JNI source') {
        def jniDir = '../jni'
        commandLine "echo Building JNI"
                // '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                // '-j', Runtime.runtime.availableProcessors(),
                // 'all',
                // 'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def jniOutDir = 'out/darwin/x86_64/release/java/jni'
        commandLine "echo Goodby"
                // '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                // 'clean'
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

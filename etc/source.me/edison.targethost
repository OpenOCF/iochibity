# source this file from IOTIVITY_HOME to setup the iotivity build environment

# CAVEAT: source this after sourcing a devhost; that sets e.g. IOTIVITY_HOME

# XC = Cross Compile

# XC_SDK=edison  # ct-ng, android-ndk, android-crystax, xcode, etc.

export PREFIX=/usr/local

export IOTIVITY_VERSION=1.1.1

export TARGET_PLATFORM=edison
export TARGET_PLATFORM_VERSION=1.7.3   # 3.5?

export TARGET_OS=poky-edison  # FIXME
export TARGET_OS_VERSION=3.10.98-poky-edison+ # $ uname -a

export TARGET_ARCH=i686		      # $ arch
#export TARGET_ARCH_ABI=armeabi-v7a # all | all32 | all64

export STAGE=release

# iotivity networking
export IP_API=Default
#export BT_API=Bluedroid
#export BLE_API=Bluedroid
#export NFC_API=??

#######################
####  OUTPUT DIRS  ####

TARGET_PATH=${TARGET_PLATFORM}/${TARGET_ARCH}/${STAGE}

# BUILD_DIR is where intermediate built products go, including 3rd party libs like gtest
# BUILD_DIR (was: IOTIVITY_LIBPATH)
# dev:
export BUILD_DIR=${IOTIVITY_HOME}/build/${TARGET_PATH}

# INSTALL_DIR is where final build output goes
# e.g. ${IOTIVITY_HOME}/sysroots/android/armeabi-v7a/release/usr/local
# dev:
export INSTALL_DIR=${IOTIVITY_HOME}/sysroots/${TARGET_PATH}
# prod:
# export BUILD_DIR=/usr/local/lib/iotivity/${IOTIVITY_VERSION}

###########################
####  3RD PARTY BUILDS ####

# set prefix to ${IOTIVITY_HOME}/lib/${TARGET_PATH}

# e.g. for ctest: "cmake -DCMAKE_INSTALL_PREFIX=${IOTIVITY_HOME}/lib/${TARGET_PATH}



#######################
####     JAVA      ####
# TODO: java-dependent stuff goes in java sdk
# export JAVA_SDK_HOME=${HOME}/android/sdk
# export GRADLE_HOME=${HOME}/gradle/gradle-2.1.1
# export JNIPATH="${HOME}/iotivity/kit/java/jni"
# JLP = java.library.path
# export JLP=${JNI_PATH}:${LIBPATH}
#export LD_LIBRARY_PATH=${JLP}
#export JLP=${IOTIVITY_LIBPATH}

##################################
########  TOOLCHAIN VARS  ########
##################################
# most toolchain vars taken from /opt/poky-edison/1.7.3/environment-setup-core2-32-poky-linux

export TOOLCHAIN=edison   #  core2-32-poky-linux ???
export TOOLCHAIN_DIR=/opt/poky-edison/1.7.3
export TOOLCHAIN_PREFIX=i586-poky-linux
export HOST_SYSROOT=${TOOLCHAIN_DIR}/sysroots/i386-pokysdk-darwin
export TARGET_SYSROOT=${TOOLCHAIN_DIR}/sysroots/core2-32-poky-linux
export TOOLCHAIN_PATH=${HOST_SYSROOT}/usr/bin:${HOST_SYSROOT}/usr/bin/${TOOLCHAIN_PREFIX}

export ADDR2LINE=${TOOLCHAIN_PREFIX}-addr2line
export AR="${TOOLCHAIN_PREFIX}-ar"
export AS="${TOOLCHAIN_PREFIX}-as"
export CC=${TOOLCHAIN_PREFIX}-gcc
export CPP=${TOOLCHAIN_PREFIX}-gcc
export CXX=${TOOLCHAIN_PREFIX}-g++
export CXXFILT=${TOOLCHAIN_PREFIX}-c++filt
export ELFEDIT=${TOOLCHAIN_PREFIX}-elfedit
export GCOV=${TOOLCHAIN_PREFIX}-gcov
export GDB=${TOOLCHAIN_PREFIX}-gdb
export GPROF=${TOOLCHAIN_PREFIX}-gprof
export LD=${TOOLCHAIN_PREFIX}-ld
export LINK=${TOOLCHAIN_PREFIX}-g++   #???
export NM=${TOOLCHAIN_PREFIX}-nm
export OBJCOPY=${TOOLCHAIN_PREFIX}-objcopy
export OBJDUMP=${TOOLCHAIN_PREFIX}-objdump
export RANLIB=${TOOLCHAIN_PREFIX}-ranlib
export READELF=${TOOLCHAIN_PREFIX}-readelf
export SIZE=${TOOLCHAIN_PREFIX}-size
export STRINGS=${TOOLCHAIN_PREFIX}-strings
export STRIP=${TOOLCHAIN_PREFIX}-strip

SYSFLAG="--sysroot=${TARGET_SYSROOT}"

HWFLAGS=" -m32 -march=core2 -mtune=core2 -msse3 -mfpmath=sse -mstackrealign -fno-omit-frame-pointer ${SYSFLAG}"

SWFLAGS=" -O2 -pipe -g -feliminate-unused-debug-types"

#scons does not deal with this correctly: export CPPFLAGS="-E ${HWFLAGS}"
export CPPFLAGS=""
export CFLAGS="${HWFLAGS} ${SWFLAGS} -std=c11"
export CXXFLAGS="${HWFLAGS} ${SWFLAGS} -std=c++11"
export LDFLAGS="-Wl,-O1 -Wl,--hash-style=gnu -Wl,--as-needed"

export LINKFLAGS="${SYSFLAG} -shared"

export SHLIBSUFFIX=".so"

export CPPPATH="${TARGET_SYSROOT}/usr/include/c++/4.9.1 \
       ${TARGET_SYSROOT}/usr/include/c++/4.9.1/${TOOLCHAIN_PREFIX}"

# we already know what's available on the target so we hardcode:
export CPPDEFINES="HAVE_ARPA_INET_H \
       HAVE_ASSERT_H HAVE_FCNTL_H HAVE_LIMITS_H HAVE_NETDB_H \
       HAVE_NETINET_IN_H HAVE_PTHREAD_CONDATTR_SETCLOCK \
       HAVE_PTHREAD_H HAVE_STDLIB_H HAVE_STRING_H \
       HAVE_SYS_SOCKET_H HAVE_SYS_TIME_H HAVE_SYS_TYPES_H \
       HAVE_TIME_H HAVE_UNISTD_H WITH_POSIX"

export PATH=${TOOLCHAIN_PATH}:${PATH}
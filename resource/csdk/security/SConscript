# //******************************************************************
# //
# // Copyright 2015 Intel Mobile Communications GmbH All Rights Reserved.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //      http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# libocsrm (share library) build script
##

Import('env')
import os
import build.utils

lib_env = env.Clone()

libocsrm_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
# As in the source code, it includes arduino Time library (C++)
# It requires compile the .c with g++
if target_os == 'arduino':
	libocsrm_env.Replace(CC = env.get('CXX'))
	libocsrm_env.Replace(CFLAGS = env.get('CXXFLAGS'))

######################################################################
# Build flags
######################################################################
libocsrm_env.PrependUnique(CPPPATH = [
 	'#extlibs/tinydtls/',
 	'#resource/csdk/stack',
 	'#resource/csdk/logger',
 	'#resource/csdk/cjson',
 	'#resource/c_common',
 	'#resource/csdk/cbor',
 	'#resource/csdk/stack/internal',
# 	'#resource/oc_logger/include',
 	'#resource/csdk/connectivity/lib/libcoap-4.1.1',
# 	'#resource/csdk/connectivity/external/inc',
 	'#resource/csdk/connectivity/common',
# 	'#resource/csdk/connectivity/inc',
 	'#resource/csdk/connectivity/api',
# 	'#resource/csdk/security',
 	'#resource/csdk/security/ocsecurity',
 	'#resource/csdk/provisioning'
])

libocsrm_env.AppendUnique(LIBS = ['coap'])
libocsrm_env.AppendUnique(LIBPATH = [env.get('BUILD_SYSROOT') + '/connectivity/coap'])

if target_os == 'arduino':
	libocsrm_env.AppendUnique(CPPDEFINES = ['NDEBUG', 'WITH_ARDUINO'])

if target_os in ['windows', 'msys_nt']:
	libocsrm_env.AppendUnique(LIBPATH = [os.path.join(env.get('BUILD_DIR'), 'resource', 'oc_logger')])

# if target_os in ['darwin', 'ios']:
# 	libocsrm_env.AppendUnique(LIBS = ['coap'])

if env.get('LOGGING'):
	libocsrm_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if env.get('DTLS_WITH_X509') == '1':
	libocsrm_env.AppendUnique(CPPDEFINES = ['__WITH_X509__'])

######################################################################
# Source files and Targets
######################################################################
libocsrm_src = [
	'secureresourcemanager.c',
	'resourcemanager.c',
	'aclresource.c',
	'verresource.c',
	'amaclresource.c',
	'amsmgr.c',
	'pstatresource.c',
	'doxmresource.c',
	'credresource.c',
	'svcresource.c',
	'pconfresource.c',
	'dpairingresource.c',
	'policyengine.c',
	'psinterface.c',
	'srmresourcestrings.c',
	'srmutility.c',
	'iotvticalendar.c',
	'base64.c',
	'directpairing.c'
	]

if env.get('SECURED'):
	libocsrm_src  = libocsrm_src + ['oxmpincommon.c', 'pbkdf2.c']
	libocsrm_env.AppendUnique(CPPDEFINES = ['__WITH_DTLS__'])
	libocsrm_env.AppendUnique(LIBS = ['ocpmapi'])
	libocsrm_env.AppendUnique(LIBPATH = [env.get('BUILD_SYSROOT') + '/security/pm'])

if target_os in ['windows', 'msys_nt']:
	libocsrm_src  = libocsrm_src + ['strptime.c']

if env.get('DTLS_WITH_X509') == '1' and env.get('SECURED'):
	crl_src = ['crlresource.c']
	libocsrm_src  = libocsrm_src + crl_src

libocsrm = libocsrm_env.StaticLibrary('ocsrm', libocsrm_src)

Alias('security', libocsrm)

#libocsrm_env.Install(libocsrm_env, libocsrm, 'libocsrm')

#build.utils.install_lib(libocsrm_env, libocsrm, 'ocsrm')

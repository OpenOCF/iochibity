# //******************************************************************
# //
# // Copyright 2015 Samsung Electronics All Rights Reserved.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //      http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#

Import('env')
import os.path

src_dir = env.get('SRC_DIR')
print "SRC DIR: ", src_dir

provisioning_env = SConscript('#build_common/thread.scons')
target_os = provisioning_env.get('TARGET_OS')
#root_dir = './../../../../'
root_dir = Dir('#').abspath

######################################################################
# Build flags
######################################################################
provisioning_env.AppendUnique(CPPPATH = [
		'./include',
		os.path.join(src_dir,'resource','csdk','security','provisioning','include'),
		os.path.join(src_dir,'resource','csdk','cbor'),
		os.path.join(src_dir,'resource','csdk','cjson'),
		'./include/internal',
		'./include/oxm',
		'./../../stack/include',
		'./../../stack/include/internal',
		'./../../../c_common/ocrandom/include',
		'./../../logger/include',
		'./../../../oc_logger/include',
		'./../../ocmalloc/include',
		'./../../resource/csdk/security/include',
		'./../../../../extlibs/cjson/',
		'./../../../../../extlibs/tinydtls/',
		'./../../connectivity/inc',
		'./../../connectivity/external/inc',
		'./../../connectivity/common/inc',
		'./../../connectivity/lib/libcoap-4.1.1',
		'./../../connectivity/api',
		'./../include',
		'./../include/internal',
		'./../../../../extlibs/tinydtls/ecc',
		'./../../../../extlibs/tinydtls/sha2',
		'./../../../../extlibs/asn1cert',
		'./ck_manager/include'
		])
if target_os not in ['tizen']:
	provisioning_env.AppendUnique(CPPPATH = [root_dir +'/extlibs/sqlite3'])

provisioning_env.AppendUnique(CPPDEFINES= ['__WITH_DTLS__'])
if target_os not in ['windows']:
	provisioning_env.AppendUnique(CFLAGS = ['-std=c99'])

if 'g++' in provisioning_env.get('CXX'):
    provisioning_env.AppendUnique(CXXFLAGS = ['-std=c++0x'])

provisioning_env.AppendUnique(LIBPATH = [provisioning_env.get('BUILD_DIR')])
provisioning_env.PrependUnique(LIBS = ['oc', 'octbstack', 'oc_logger', 'connectivity_abstraction', 'coap'])

provisioning_env.AppendUnique(LIBS = ['tinydtls'])

if provisioning_env.get('DTLS_WITH_X509') == '1':
	provisioning_env.AppendUnique(LIBS = ['CKManager', 'asn1'])

if target_os in ['linux', 'tizen']:
	provisioning_env.ParseConfig('pkg-config --libs glib-2.0')

if target_os in ['windows', 'msys_nt']:
	provisioning_env.AppendUnique(LIBS = ['ws2_32', 'advapi32', 'iphlpapi', 'timer'])

if target_os in ['tizen']:
	provisioning_env.ParseConfig('pkg-config --cflags --libs sqlite3')

if target_os in ['android']:
	provisioning_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	provisioning_env.AppendUnique(LIBS = ['gnustl_static'])

	if not provisioning_env.get('RELEASE'):
		provisioning_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if target_os in ['darwin', 'ios']:
	provisioning_env.AppendUnique(CPPDEFINES = ['_DARWIN_C_SOURCE'])

######################################################################
# Source files and Targets
######################################################################
provisioning_src = [
	'src/pmutility.c',
	'src/credentialgenerator.c',
	'src/ownershiptransfermanager.c',
	'src/secureresourceprovider.c',
	'src/ocprovisioningmanager.c',
	'src/oxmjustworks.c',
	'src/oxmrandompin.c',
	'src/provisioningdatabasemanager.c' ]

# if target_os == 'darwin':  #FIXME: if HAS_GETTIMEOFDAY
#    provisioning_src = provisioning_src + ['src/compat/darwin.c']
# elif target_os == 'linux': #FIXME:  if HAS_POSIX_TIMERS
#    provisioning_src = provisioning_src + ['src/compat/posix.c']
# elif target_os == 'win32': #FIXME:  if WIN32?
#    provisioning_src = provisioning_src + ['src/compat/win32.c']
# else:
#    provisioning_src = provisioning_src + ['src/compat/generic.c']

if target_os != 'tizen':
	provisioning_src = provisioning_src + [root_dir+'/extlibs/sqlite3/sqlite3.c' ]

if target_os == 'windows':
	# TODO: Add OC_EXPORT annotations and enable generation of Windows DLL
	# https://jira.iotivity.org/browse/IOT-1188
	provisioningserver = provisioning_env.StaticLibrary('ocpmapi', provisioning_src)
else:
	provisioningserver = provisioning_env.SharedLibrary('ocpmapi', provisioning_src)

provisioning_env.InstallTarget(provisioningserver, 'ocpmapi')
provisioning_env.UserInstallTargetLib(provisioningserver, 'ocpmapi')

if provisioning_env.get('DTLS_WITH_X509') == '1':
	SConscript('ck_manager/SConscript')

#GAR samples
# if target_os in ['linux', 'msys_nt', 'windows', 'tizen']:
# 	SConscript('sample/SConscript')

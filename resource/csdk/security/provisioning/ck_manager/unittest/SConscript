# //******************************************************************
# //
# // Copyright 2015 Samsung Electronics All Rights Reserved.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //      http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')
import os
import os.path

#GAR gtest
# # SConscript file for Local PKI google tests
# gtest_env = SConscript('#extlibs/gtest/SConscript')
pki_test_env = env.Clone()
src_dir = pki_test_env.get('SRC_DIR')
build_dir = pki_test_env.get('BUILD_DIR')
target_os = pki_test_env.get('TARGET_OS')

######################################################################
# Build flags
######################################################################
pki_test_env.PrependUnique(CPPPATH = ['../include/',
				'../include/internal',
				'../../include',
				'../../include/internal',
				'../../../include',
				'../../../include/internal',
				'../../../../connectivity/inc',
				'../../../../connectivity/api',
				'../../../../logger/include',
				'../../../../stack',
				'../../../../../oc_logger/include',
				'../../../../../../extlibs/asn1cert',
				'../../../../../../extlibs/tinydtls',
				'../../../../../../extlibs/tinydtls/ecc',
				'../../../../../../extlibs/tinydtls/sha2'
		])
pki_test_env.AppendUnique(LIBPATH = [pki_test_env.get('BUILD_DIR')])

pki_test_env.AppendUnique(LIBS = ['octbstack'])
pki_test_env.AppendUnique(LIBS = ['CKManager'])
pki_test_env.AppendUnique(LIBS = ['asn1'])

if pki_test_env.get('SECURED') == '1':
    pki_test_env.AppendUnique(LIBS = ['tinydtls'])

if not pki_test_env.get('RELEASE'):
	pki_test_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
unittest = pki_test_env.Program('unittest', ['pki_test.cpp',
                                            'ckm_info_test.cpp',
                                            'crl_generator_test.cpp',
                                            'csr_generator_test.cpp'])

Alias("test", [unittest])



unittest_src_dir = src_dir + '/resource/csdk/security/provisioning/ck_manager/unittest/test_data/'

unittest_build_dir = os.path.join(build_dir, 'resource', 'csdk', 'security', 'provisioning', 'ck_manager', 'unittest')
unittest_build_dir = unittest_build_dir.encode('string_escape')
pki_test_env.AppendUnique(CPPDEFINES = ['SECURITY_BUILD_UNITTEST_DIR='+unittest_build_dir])
pki_test_env.Alias("install", pki_test_env.Install( unittest_build_dir, [ unittest_src_dir + '01.der',
								unittest_src_dir + 'cacert.der',
								unittest_src_dir + 'capub.der',
								unittest_src_dir + 'cert_chain.dat',
								unittest_src_dir + 'chain.der',
								unittest_src_dir + 'CKMInfo.dat' ]))

pki_test_env.AppendTarget('test')
if pki_test_env.get('TEST') == '1':
	if target_os in ['darwin','linux']:
		out_dir = pki_test_env.get('BUILD_DIR')
		# result_dir = env.get('BUILD_DIR') + '/test_out/'
		result_dir = os.path.join(pki_test_env.get('BUILD_DIR'), 'test_out') + os.sep
		if not os.path.isdir(result_dir):
			os.makedirs(result_dir)
		pki_test_env.AppendENVPath('GTEST_OUTPUT', ['xml:'+ result_dir])
		if target_os == 'darwin':
		    pki_test_env.AppendENVPath('DYLD_LIBRARY_PATH', [out_dir])
		if target_os == 'linux':
		    pki_test_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
 		ut = pki_test_env.Command ('ut', None, out_dir + '/resource/csdk/security/provisioning/ck_manager/unittest/unittest')

AlwaysBuild ('ut')


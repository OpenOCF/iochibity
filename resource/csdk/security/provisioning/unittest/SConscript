# //******************************************************************
# //
# // Copyright 2015 Samsung Electronics All Rights Reserved.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //      http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#

Import('env')
import os
import os.path
sptest_env = env.Clone()

src_dir = sptest_env.get('SRC_DIR')

######################################################################
# Build flags
######################################################################
sptest_env.PrependUnique(CPPPATH = [
		'../include',
		'../../include',
		'../include/internal',
		'../../../stack/include',
		'../../../ocrandom/include',
		'../../../logger/include',
		'../../../stack/include',
		'../../../security/include',
		'../../../security/include/internal',
		'../../../security/provisioning/include/internal',
		'../../../../oc_logger/include',
		'../include/oxm',
		'../../../../../extlibs/tinydtls',
		'../../../../../extlibs/cjson',
		'../../../../../extlibs/base64',
		'../../../connectivity/inc',
		'../../../connectivity/common/inc',
		'../../../connectivity/lib/libcoap-4.1.1',
		'../../../connectivity/api',
		'../../../../../extlibs/tinydtls',
		'../../../../../extlibs/gtest/gtest-1.7.0/include'
		])
sptest_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-pthread'])
sptest_env.AppendUnique(LIBS = ['-lpthread','-ldl'])
sptest_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
sptest_env.AppendUnique(LIBPATH = [src_dir + '/extlibs/gtest/gtest-1.7.0/lib/.libs'])
sptest_env.PrependUnique(LIBS = [   'ocpmapi',
                                    'oc',
                                    'ocsrm',
                                    'octbstack',
                                    'oc_logger',
                                    'connectivity_abstraction',
                                    'coap',
                                    'gtest',
                                    'gtest_main'])

if env.get('SECURED') == '1':
    sptest_env.AppendUnique(LIBS = ['tinydtls'])
if env.get('DTLS_WITH_X509') == '1':
	sptest_env.AppendUnique(LIBS = ['CKManager'])
	sptest_env.AppendUnique(LIBS = ['asn1'])

if not env.get('RELEASE'):
	sptest_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
unittest = sptest_env.Program('unittest', ['pmutilitytest.cpp',
                                           'secureresourceprovider.cpp',
                                           'provisioningdatabasemanager.cpp',
                                           'ocprovisioningmanager.cpp','otmunittest.cpp' ])

sample_server1 = sptest_env.Program('sample_server1', ['sampleserver1.cpp'])
sample_server2 = sptest_env.Program('sample_server2', ['sampleserver2.cpp'])

provisioning_unittest_src_dir = src_dir + '/resource/csdk/security/provisioning/unittest/'
provisioning_unittest_build_dir = env.get('BUILD_DIR') +'/resource/csdk/security/provisioning/unittest/'

Alias("test", [unittest, sample_server1, sample_server2])

env.AppendTarget('test')
if env.get('TEST') == '1':
	target_os = env.get('TARGET_OS')
	if target_os == 'linux':
		out_dir = env.get('BUILD_DIR')
		result_dir = env.get('BUILD_DIR') + '/test_out/'
		if not os.path.isdir(result_dir):
			os.makedirs(result_dir)
		sptest_env.AppendENVPath('GTEST_OUTPUT', ['xml:'+ result_dir])
		sptest_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
		sptest_env.AppendENVPath('LD_LIBRARY_PATH', ['./extlibs/gtest/gtest-1.7.0/lib/.libs'])
		ut = sptest_env.Command ('ut', None, out_dir + '/resource/csdk/security/provisioning/unittest/unittest')
		AlwaysBuild ('ut')


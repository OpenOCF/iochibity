# //******************************************************************
# //
# // Copyright 2015 Intel Mobile Communications GmbH All Rights Reserved.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //      http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#

Import('env')
import os
import os.path

#env = Environment()
srmtest_env = env.Clone()
target_os = env.get('TARGET_OS')

<<<<<<< HEAD
src_dir   = srmtest_env.get('SRC_DIR')
build_dir = srmtest_env.get('BUILD_DIR')
=======
src_dir = srmtest_env.get('SRC_DIR')
target_os = env.get('TARGET_OS')
>>>>>>> upstream-master

######################################################################
# Build flags
######################################################################
home = os.environ['HOME']
gtest_dir = home + '/.iotivity.d/gtest-1.7.0'

srmtest_env.PrependUnique(CPPPATH = [
		'../../../c_common/oic_malloc/include',
 		'./../../connectivity/inc',
		'./../../connectivity/api',
		'./../../connectivity/external/inc',
		'./../../connectivity/lib/libcoap-4.1.1',
		'./../include',
		'./../include/internal',
		'./../../logger/include',
		'./../../stack/include',
		'./../../stack/include/internal',
		'./../../../oc_logger/include',
		gtest_dir + '/include',
		'./../../cbor/',
		'./../../cjson/',
                './../provisioning/include'
#		'./../../../../extlibs/tinydtls/'
		])

srmtest_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall', '-pthread'])
srmtest_env.AppendUnique(LIBS = ['-lpthread'])
srmtest_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')
				   ,gtest_dir + '/lib/.libs'])
srmtest_env.PrependUnique(LIBS = ['ocsrm',
                                    'octbstack',
                                    'oc_logger',
                                    'connectivity_abstraction',
                                    'coap',
                                    'gtest',
                                    'gtest_main'])

if env.get('SECURED') == '1':
    srmtest_env.AppendUnique(LIBS = ['tinydtls', 'timer'])

if env.get('LOGGING') == '1':
	srmtest_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if target_os == 'windows':
	srmtest_env.AppendUnique(LINKFLAGS = ['/subsystem:CONSOLE'])
	srmtest_env.AppendUnique(LIBS = ['advapi32', 'kernel32', 'ws2_32', 'iphlpapi'])
else:
	# TODO: Implement feature check.
	srmtest_env.AppendUnique(CPPDEFINES = ['HAVE_LOCALTIME_R'])

######################################################################
# Source files and Targets
######################################################################
unittest = srmtest_env.Program('unittest', ['aclresourcetest.cpp',
                                            'amaclresourcetest.cpp',
                                            'pstatresource.cpp',
                                            'doxmresource.cpp',
                                            'policyengine.cpp',
                                            'securityresourcemanager.cpp',
                                            'credentialresource.cpp',
                                            'srmutility.cpp',
                                            'iotvticalendartest.cpp',
                                            'base64tests.cpp',
                                            'svcresourcetest.cpp',
                                            'srmtestcommon.cpp',
                                            'directpairingtest.cpp',
                                            'crlresourcetest.cpp'])

Alias("test", [unittest])

unittest_src_dir = src_dir + '/resource/csdk/security/unittest/'
<<<<<<< HEAD
unittest_build_dir = build_dir + 'resource/csdk/security/unittest'
=======
unittest_build_dir = os.path.join(env.get('BUILD_DIR'), 'resource', 'csdk', 'security', 'unittest') + os.sep
>>>>>>> upstream-master

srmtest_env.AppendUnique(CPPDEFINES = ['SECURITY_BUILD_UNITTEST_DIR='+unittest_build_dir.encode('string_escape')])

srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_unittest.json'))
srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_unittest_acl1.json'))
srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_unittest_default_acl.json'))

srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_unittest.dat'))
srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_unittest_acl1.dat'))
srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_unittest_default_acl.dat'))
srmtest_env.Alias("install", srmtest_env.Install( unittest_build_dir,
    unittest_src_dir + 'oic_svr_db_prov.dat'))
env.AppendTarget('test')
if env.get('TEST') == '1':
<<<<<<< HEAD
	if target_os in ['darwin', 'linux']:
=======
	target_os = env.get('TARGET_OS')
	if target_os in ['linux', 'windows']:
>>>>>>> upstream-master
		out_dir = env.get('BUILD_DIR')
		result_dir = env.get('BUILD_DIR') + '/test_out/'
		if not os.path.isdir(result_dir):
			os.makedirs(result_dir)
		srmtest_env.AppendENVPath('GTEST_OUTPUT', ['xml:'+ result_dir])
<<<<<<< HEAD
		if target_os == 'darwin':
		    srmtest_env.AppendENVPath('DYLD_LIBRARY_PATH', [gtest_dir + '/lib/.libs'])
		    srmtest_env.AppendENVPath('DYLD_FALLBACK_LIBRARY_PATH', [gtest_dir + '/lib/.libs'])
		elif target_os == 'linux':
		    srmtest_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
		    srmtest_env.AppendENVPath('LD_LIBRARY_PATH', [gtest_dir + '/lib/.libs'])
=======
		srmtest_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
		srmtest_env.AppendENVPath('PATH', [os.path.join(out_dir, 'resource', 'csdk')])
		srmtest_env.AppendENVPath('LD_LIBRARY_PATH', ['./extlibs/gtest/gtest-1.7.0/lib/.libs'])
>>>>>>> upstream-master
		ut = srmtest_env.Command ('ut', None, out_dir + '/resource/csdk/security/unittest/unittest')
		AlwaysBuild ('ut')

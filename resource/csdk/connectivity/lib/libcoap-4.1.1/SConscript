##
# libcoap (share library) build script
##

import os
import build.utils

Import('env')

local_env = env.Clone()

target_os = env.get('TARGET_OS')
root_dir = os.pardir

install_sysroot = local_env.get('INSTALL_SYSROOT')

ca_transport = env.get('TARGET_TRANSPORT')
with_tcp = env.get('WITH_TCP')
# As in the source code(C) includes arduino Time library head file(C++)
# It requires compile the .c with g++
if target_os == 'arduino':
	local_env.Replace(CFLAGS = env.get('CXXFLAGS'))

######################################################################
# Build flags
######################################################################
	local_env.PrependUnique(CPPPATH = [
		'./',
		env.get('ARDUINO_HOME')+'/',
		env.get('ARDUINO_HOME')+'/hardware/arduino/avr/cores/arduino',
		env.get('ARDUINO_HOME')+'/hardware/tools/avr/avr/include/',
		env.get('ARDUINO_HOME')+'/hardware/arduino/avr/variants/mega',
		env.get('ARDUINO_HOME')+'/libraries/Time/Time',
		env.get('ARDUINO_HOME')+'/libraries/TimedAction',
		env.get('ARDUINO_HOME')+'/hardware/arduino/avr/libraries/SPI',
		env.get('ARDUINO_HOME')+'/libraries/Ethernet/src/utility',
		])
else:
	local_env.AppendUnique(CPPPATH = [os.path.join(root_dir, 'libcoap-4.1.1')])


if target_os not in ['arduino', 'windows', 'msys_nt']:
	local_env.AppendUnique(CPPDEFINES = ['_DEFAULT_SOURCE'])

#GAR
# if target_os in ['linux', 'darwin', 'poky-edison', 'tizen', 'android', 'ios', 'arduino']:
# 	if with_tcp == True:
# 		local_env.AppendUnique(CPPDEFINES = ['WITH_TCP'])

if target_os == 'msys_nt':
	local_env.AppendUnique(CPPDEFINES = ['_DEFAULT_SOURCE'])
	local_env.AppendUnique(CFLAGS = ['-std=c99'])

if target_os in ['linux', 'darwin', 'poky-edison', 'tizen', 'android', 'arduino']:
	local_env.AppendUnique(LIBS = ['log'])
	if (('BLE' in ca_transport) or ('BT' in ca_transport) or ('ALL' in ca_transport)):
		local_env.AppendUnique(CPPDEFINES = ['WITH_TCP'])

if target_os == 'arduino':
	local_env.AppendUnique(CPPDEFINES = ['NDEBUG', 'WITH_ARDUINO'])

if env.get('LOGGING'):
	local_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Target(s)
######################################################################
libcoap_src = [
	'pdu.c',
	'net.c',
	'debug.c',
	'encode.c',
	'uri.c',
	'coap_list.c',
	'resource.c',
	'hashkey.c',
	'str.c',
	'option.c',
	'async.c',
	'subscribe.c',
	'block.c'
	]

libcoap = local_env.StaticLibrary('coap', libcoap_src)

local_env.Install(install_sysroot + '/lib', libcoap)


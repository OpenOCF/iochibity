#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# libcsckstack (static library) build script
##
Import('env')
import build.utils

print "LIBCSDKSTACK LIBS:", env.get('LIBS')

lib_env = env.Clone()

build_sysroot = env.get('BUILD_SYSROOT')
install_sysroot = env.get('INSTALL_SYSROOT')
local_env = lib_env.Clone()

target_os = env.get('TARGET_OS')
rd_mode = env.get('RD_MODE')

with_ra = env.get('WITH_RA')
with_ra_ibb = env.get('WITH_RA_IBB')
with_tcp = env.get('WITH_TCP')
with_mq = env.get('WITH_MQ')
# As in the source code, it includes arduino Time library (C++)
# It requires compile the .c with g++
if target_os == 'arduino':
	local_env.Replace(CC = env.get('CXX'))
	local_env.Replace(CFLAGS = env.get('CXXFLAGS'))

######################################################################
# Build flags
######################################################################
local_env.PrependUnique(CPPPATH = [
	'#resource/c_common',
	'#resource/csdk/cbor/',
	'#resource/csdk/cjson/',
	'#resource/csdk/logger',
	'#resource/csdk/routing',
	'#resource/csdk/stack',
	'#resource/csdk/timer',
	'#resource/csdk/connectivity/lib/libcoap-4.1.1',
	'#resource/csdk/connectivity/common/inc',
	'#resource/csdk/connectivity/inc',
	'#resource/csdk/connectivity/api',
	'#resource/csdk/connectivity/external/inc',
	'#resource/csdk/security',
	'#resource/csdk/security/ocsecurity',
	'#resource/csdk/provisioning'])

	# './../oc_logger/include',

# 'stack/include',
		# 'stack/include/internal',

if 'SUB' in with_mq:
	local_env.AppendUnique(CPPDEFINES = ['MQ_SUBSCRIBER', 'WITH_MQ'])
if 'PUB' in with_mq:
	local_env.AppendUnique(CPPDEFINES = ['MQ_PUBLISHER', 'WITH_MQ'])
if 'BROKER' in with_mq:
	local_env.AppendUnique(CPPDEFINES = ['MQ_BROKER', 'WITH_MQ'])

if target_os not in ['arduino', 'windows']:
	local_env.AppendUnique(CPPDEFINES  = ['WITH_POSIX'])

if local_env.get('ROUTING') == 'GW':
	local_env.AppendUnique(CPPDEFINES = ['ROUTING_GATEWAY'])
elif local_env.get('ROUTING') == 'EP':
	local_env.AppendUnique(CPPDEFINES = ['ROUTING_EP'])

print "STACK BUILD SYSROOT:", build_sysroot

local_env.AppendUnique(LIBPATH = [install_sysroot + '/lib',
                                  build_sysroot + '/c_common',
                                  build_sysroot + '/connectivity/coap',
                                  build_sysroot + '/connectivity/core',
                                  build_sysroot + '/csdk',
                                  build_sysroot + '/routing'])

print local_env.Dump()

local_env.PrependUnique(LIBS = ['c_common', 'coap', 'csdk'])



if target_os in ['android', 'darwin', 'linux', 'poky-edison', 'tizen', 'msys_nt', 'windows']:
	local_env.PrependUnique(LIBS = ['connectivity_abstraction'])

	if with_ra_ibb:
		local_env.AppendUnique(LIBS = local_env['RALIBS'],
                                              LIBPATH = local_env['RALIBPATH'],
                                              RPATH = local_env['RARPATH'])
	else :
		if with_ra:
			local_env.AppendUnique(LIBS = ['ra_xmpp'])

if target_os in ['windows', 'msys_nt']:
	local_env.AppendUnique(CPPDEFINES  = ['OC_EXPORT_DLL'])
	local_env.AppendUnique(LIBS = ['ws2_32', 'advapi32', 'iphlpapi'])
else:
	local_env.AppendUnique(LIBS = ['m'])

if target_os == 'arduino':
	local_env.AppendUnique(CPPDEFINES = ['NDEBUG', 'WITH_ARDUINO'])

if target_os == 'android':
    local_env.AppendUnique(LINKFLAGS = ['-Wl,-soname,liboctbstack.so'])

#if env.get('SECURED'):
local_env.AppendUnique(CPPDEFINES = ['SECURED'])
local_env.AppendUnique(LIBS = ['ocpmapi'])
local_env.AppendUnique(LIBPATH = [build_sysroot + '/provisioning'])
local_env.AppendUnique(LIBS = ['ocsrm'])
local_env.AppendUnique(LIBPATH = [build_sysroot + '/security'])
local_env.AppendUnique(LIBS = ['tinydtls'])
local_env.AppendUnique(LIBPATH = [build_sysroot + '/tinydtls'])

# we always need liblogger, for e.g. VERIFY_NON_NULL_NR
local_env.AppendUnique(LIBPATH = [build_sysroot + '/logger'])
local_env.PrependUnique(LIBS = ['logger'])

# but we do not always need logging (OIC_LOG_foo)
if local_env.get('LOGGING'):
        local_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if env.get('DTLS_WITH_X509') == '1':
	local_env.AppendUnique(CPPDEFINES = ['__WITH_X509__'])

#local_env.Append(LIBS = ['c_common'])

if local_env.get('ROUTING') in ['GW', 'EP']:
#	local_env.Prepend(LIBPATH = [env.get('INSTALL_SYSROOT')])
	local_env.Prepend(LIBS = ['routingmanager'])

######################################################################
# Source files and Targets
######################################################################

CSDKSTACK_SRC = '#resource/csdk'
lib_src = [
        'ocstack.c',
	'ocpayload.c',
	'ocpayloadparse.c',
	'ocpayloadconvert.c',
	'occlientcb.c',
	'ocresource.c',
	'ocobserve.c',
	'ocserverrequest.c',
	'occollection.c',
	'oicgroup.c']

	# CSDKSTACK_SRC + '/cjson/cJSON.c',
	# CSDKSTACK_SRC + '/timer/timer.c',
	# CSDKSTACK_SRC + "/cbor/cborencoder.c",
	# CSDKSTACK_SRC + "/cbor/cborerrorstrings.c",
	# CSDKSTACK_SRC + "/cbor/cborparser.c"

if 'CLIENT' in rd_mode or 'SERVER' in rd_mode:
	lib_src.append('rdpayload.c')
	lib_src.append('oicresourcedirectory.c')
	if 'CLIENT' in rd_mode:
		local_env.AppendUnique(CPPDEFINES = ['RD_CLIENT'])
	if 'SERVER' in rd_mode:
		local_env.AppendUnique(CPPDEFINES = ['RD_SERVER'])

if with_tcp == True:
	lib_src.append('oickeepalive.c')

# lib_src.extend(env['cbor_files'])

if target_os == 'windows':
	local_env.AppendUnique(CPPDEFINES = ['CBOR_API=__declspec(dllexport)',
	                                     'CBOR_PRIVATE_API=__declspec(dllexport)'])

print "STACK LIBPATH 2: ", env.get('LIBPATH')

##############################################
####  here are the actual build commands  ####

if target_os == 'darwin':
 	local_env.AppendUnique(LINKFLAGS = ['-install_name', install_sysroot + '/lib/libchibity.dylib'])

major_version = '1'
local_env.Replace(SHLIBVERSION='1.1.1')

libchibity = local_env.StaticLibrary('chibity', lib_src)
#build.utils.install_lib(local_env, libchibity, 'chibity')
# #GAR: InstallVersionedLib broken on OS X, no symlinks created
staticlib = local_env.InstallVersionedLib(target=env.get('INSTALL_SYSROOT') + '/lib',
                                          source=libchibity)
Alias('chibity', staticlib)

if target_os not in ['arduino', 'ios'] :
        if target_os in ['poky-edison', 'linux']:
	        sharedlib = local_env.SharedLibrary(target='chibity',
                                                    source=lib_src,
                                                    SHLIBVERSION='1.1.1')
        elif target_os == 'darwin':
                local_env.PrependUnique(LINKFLAGS = ['-current_version', '1.1.1'])
                local_env.Prepend(LINKFLAGS = ['-compatibility_version', '1.1.1'])
	        sharedlib = local_env.SharedLibrary(target='chibity',
                                                    source=lib_src)
	# octbstack_libs += Flatten(sharedlib)
	# build.utils.install_header(local_env, ['ocstack.h', 'ocpresence.h'], '')
	# build.utils.install_header(local_env, 'ocpresence.h', '')

# local_env.Replace(SHLIBVERSION = '1.1.1')

# #GAR: InstallVersionedLib broken on OS X, no symlinks created
dylib = local_env.InstallVersionedLib(target=env.get('INSTALL_SYSROOT') + '/lib',
                                      source=sharedlib)
Alias('chibity', dylib)

# local_env.InstallTarget(octbstack_libs, 'octbstack')
# local_env.UserInstallTargetLib(octbstack_libs, 'octbstack')

headers = ['ocstackconfig.h',
           'octypes.h',
           'ocstack.h',
           'ocpresence.h',
           'ocpayload.h',]
# header_dir = install_sysroot + '/include'

# local_env.Install(header_dir, headers)

build.utils.install_headers(local_env, headers, '', 'chibity')

# build.utils.install_header(local_env, 'octypes.h', 'resource', 'octypes.h')

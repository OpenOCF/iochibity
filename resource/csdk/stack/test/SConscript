#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('test_env')
import os
import os.path
import build.utils

test_env = test_env.Clone()

target_os = test_env.get('TARGET_OS')

######################################################################
# Build flags
######################################################################
test_env.PrependUnique(CPPPATH = [
		'#resource/csdk/security',
		'#resource/csdk/security/ocsecurity',
		'#resource/csdk/logger',
		'#resource/csdk/cbor',
		'#resource/c_common',
		'#resource/csdk/stack',
		'#resource/csdk/stack/internal',  #FIXME: this is private
		'#resource/csdk/connectivity/api',
		'#resource/csdk/connectivity/external/inc',
		'#resource/csdk/cjson'
		])
#		'#resource/oc_logger/include'
#		'../../stack/internal',

#GAR uuid
test_env.PrependUnique(LIBS = ['octbstack',
                               'ocsrm',
                               'connectivity_abstraction',
                               'coap'])

if target_os != 'darwin':
        test_env.PrependUnique(LIBS = ['uuid'])

test_env.AppendUnique(LIBPATH = [test_env.get('INSTALL_SYSROOT')])

# test_env.PrependUnique(LIBS = ['oc_logger'])

if test_env.get('SECURED') == '1':
    test_env.AppendUnique(LIBS = ['tinydtls'])

if test_env.get('LOGGING'):
	test_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if target_os in ['msys_nt', 'windows']:
	test_env.AppendUnique(LINKFLAGS = ['/subsystem:CONSOLE'])
	test_env.AppendUnique(LIBS = ['ws2_32', 'iphlpapi', 'kernel32'])
else:
	test_env.PrependUnique(LIBS = ['m'])

######################################################################
# Source files and Targets
######################################################################
stacktests = test_env.Program(target='stacktests', source=['./stacktests.cpp'])
test_env.Decider('timestamp-newer')
cbortests = test_env.Program('cbortests', ['cbortests.cpp'])

Alias("test", [stacktests, cbortests])

#test_env.Install(os.path.join(test_env.get('INSTALL_SYSROOT'), 'test'),  stacktests)
build.utils.install_bin(test_env, stacktests, 'stacktests')

#test_env.Install(os.path.join(test_env.get('INSTALL_SYSROOT'), 'test'),  cbortests)
build.utils.install_bin(test_env, cbortests, 'cbortests')

# if env.get('WITH_VALGRIND'):
#         valgrind_xml = 'resource_csdk_stack_test.memcheck'
# else:
#         valgrind_xml = ''

# import test_utils

# if target_os in ['windows']:
#     test_env.AppendENVPath('PATH', [os.path.join(test_env.get('BUILD_DIR'), 'resource', 'csdk')])

# test_utils.run_test(test_env,
#                          valgrind_xml,
#                          'resource/csdk/stack/test/stacktests')

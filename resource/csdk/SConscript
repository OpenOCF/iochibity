#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

print "csdk/SConscript"

##
# liboctbstack (share library) build script
##
Import('env')

target_os = env.get('TARGET_OS')
build_sysroot = env.get('BUILD_SYSROOT')
print "kernel BUILD DIR", build_sysroot

lib_env = env.Clone()

CSDKSTACK_SRC = '#resource/csdk'
lib_env.PrependUnique(CPPPATH = ['#resource/c_common',
                                 CSDKSTACK_SRC + '/cbor',
	                         CSDKSTACK_SRC + '/cjson',
	                         CSDKSTACK_SRC + '/timer'])

o1 = lib_env.Object('cborencoder.o',      'cbor/cborencoder.c')
o2 = lib_env.Object('cborerrorstrings.o', 'cbor/cborerrorstrings.c'),
o3 = lib_env.Object('cborparser.o',       'cbor/cborparser.c')
o4 = lib_env.Object('cbortojson.o',       'cbor/cbortojson.c')
o5 = lib_env.Object('cborpretty.o',       'cbor/cborpretty.c')
o6 = lib_env.Object('cJSON.o',            'cjson/cJSON.c')
o7 = lib_env.Object('timer.o',            'timer/timer.c')
o8 = lib_env.Object('open_memstream.o',   'cbor/open_memstream.c')
o9 = lib_env.Object('cborencoder_close_container_checked',   'cbor/cborencoder_close_container_checked.c')

if env.get('LOGGING'):
	lib_env.AppendUnique(CPPDEFINES = ['TB_LOG'])
	lib_env.AppendUnique(CPPPATH = [CSDKSTACK_SRC + '/logger'])

lib_env.StaticLibrary('csdk', [o1, o2, o3, o4, o5, o6, o7, o8, o9])

if env.get('ROUTING') in ['GW', 'EP']:
        print "ROUTING: ", env.get('ROUTING')
	# Build Routing
	SConscript('routing/SConscript',
                   variant_dir=build_sysroot + '/routing',
                   duplicate=0)

# if target_os in ['darwin', 'linux']:
#         SConscript('tools/SConscript',
#                    variant_dir=build_sysroot + '/bin',
#                    duplicate=0)

if env.get('SECURED'):
        #    if target_os in ['darwin', 'linux', 'poky-edison', 'android', 'tizen', 'msys_nt', 'windows']:
	SConscript('#extlibs/tinydtls/SConscript',
		   variant_dir=build_sysroot + '/tinydtls',
		   duplicate=0)
        SConscript('provisioning/SConscript',
                   variant_dir=build_sysroot + '/provisioning',
                   duplicate=0)
        SConscript('security/SConscript',
                   variant_dir=build_sysroot + '/security',
                   duplicate=0)

# # Build liboctbstack
SConscript('stack/SConscript',
           variant_dir=build_sysroot + '/stack',
           duplicate=0)

# Build connectivity
SConscript('connectivity/SConscript',
	   variant_dir=build_sysroot + '/connectivity',
           duplicate=0)

# Build liblogger
SConscript('logger/SConscript',
           variant_dir=build_sysroot + '/logger',
           duplicate=0)

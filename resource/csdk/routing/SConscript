Import('env')
import os
import build.utils

print "ROUTING SCONSCRIPT"

env.AppendUnique(CPPPATH = ['#resource/csdk/routing'])

if env.get('TARGET_OS') == 'tizen':
	env.AppendUnique(LIBPATH = [env.get('BUILD_SYSROOT')])
# else:
# 	env.AppendUnique(LIBPATH = [os.path.join(env.get('BUILD_SYSROOT'), 'routing')])

env.AppendUnique(LIBS = ['routingmanager'])

local_env = env.Clone()

print "routing ROUTING MODE:", local_env.get('ROUTING')
print "routing ROUTING CPPPATH", local_env.get('CPPPATH')

local_env.AppendUnique(CPPPATH = ['#resource/c_common',
				  '#resource/csdk/stack',
				  '#resource/csdk/stack/internal',
				  '#resource/csdk/logger',
				  '#resource/csdk/connectivity/api',
				  '#resource/csdk/connectivity/common'])

if env.get('ROUTING') == 'GW':
	local_env.AppendUnique(CPPPATH = [
				'#resource/csdk/security'
			])
				# './../../oc_logger/include'),

######################################################################
# Build flags
######################################################################

if env.get('LOGGING') == '1':
	local_env.AppendUnique(CPPDEFINES=['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################

if env.get('ROUTING') == 'GW':
	routing_src = [
		'routingutility.c',
		'routingmanager.c',
		'routingtablemanager.c',
		'routingmanagerinterface.c',
		'routingmessageparser.c',
    ]
elif env.get('ROUTING') == 'EP':
	routing_src = [
		'routingutility.c',
    ]

routinglib = local_env.StaticLibrary('routingmanager', routing_src)
build.utils.install_lib(local_env, routinglib, 'routingmanager')

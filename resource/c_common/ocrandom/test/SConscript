#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')
import os
import os.path
randomtest_env = env.Clone()

target_os = env.get('TARGET_OS')

src_dir = randomtest_env.get('SRC_DIR')

######################################################################
# Build flags
######################################################################
home = os.environ['HOME']

randomtest_env.PrependUnique(CPPPATH = ['../include'
				       ,'./../../logger/include'
				       ,'./../../../oc_logger/include'])

randomtest_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')
				      ,'/usr/local/lib'])

if target_os == 'darwin':
    randomtest_env.PrependUnique(LIBS = ['m'
    				      ,'gtest'
				      ,'gtest_main'
    				      ,'octbstack'])
else:
    randomtest_env.PrependUnique(LIBS = ['m'
					,'gtest'
					,'gtest_main'
    				      	,'octbstack'
					,'uuid'])

# if target_os in ['linux']:
#     randomtest_env.AppendUnique(LIBS = ['m'])

if randomtest_env.get('LOGGING'):
	randomtest_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
randomtests = randomtest_env.Program('randomtests', ['linux/randomtest.cpp'])

Alias("test", [randomtests])

env.AppendTarget('test')

if env.get('WITH_VALGRIND'):
        valgrind_xml = 'resource_csdk_random_test.memcheck'
else:
        valgrind_xml = ''

import runtest.RunTest

runtest.RunTest.run_test(randomtest_env,
                         valgrind_xml,
                         'resource/c_common/ocrandom/test/randomtests')

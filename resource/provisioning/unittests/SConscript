#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('test_env')
import os
import os.path

src_dir = test_env.get('SRC_DIR')
target_os = test_env.get('TARGET_OS')
with_ra = test_env.get('WITH_RA')
with_ra_ibb = test_env.get('WITH_RA_IBB')

######################################################################
# Build flags
######################################################################
test_env.PrependUnique(CPPPATH = [
		'../../include',
		'../../oc_logger/include',
		'../../csdk/stack/include',
		'../../csdk/security/include',
		'../../csdk/security/provisioning/include',
		'../../csdk/security/provisioning/include/oxm',
		'../../csdk/security/provisioning/include/internal',
		'../../csdk/stack/include/internal',
		'../../csdk/connectivity/api',
		'../../csdk/connectivity/external/inc',
		'../../csdk/ocsocket/include',
		'../../csdk/ocrandom/include',
		'../../csdk/logger/include',
		'../../../extlibs/hippomocks-master/HippoMocks',
		'../../../extlibs/hippomocks-master/HippoMocksTest'
		])

test_env.AppendUnique(LIBPATH = [test_env.get('BUILD_DIR')])
test_env.PrependUnique(LIBS = ['ocprovision',
		               'oc',
		               'ocpmapi',
		               'octbstack',
		               'oc_logger',
		               'connectivity_abstraction',
		               'coap'])

if with_ra_ibb:
	test_env.AppendUnique(LIBS = test_env['RALIBS'],
                              LIBPATH = test_env['RALIBPATH'],
                              RPATH = test_env['RARPATH'])
	print "RALIBS = %s" % test_env['RALIBS']
	print "RALIBPATH = %s" % test_env['RALIBPATH']
	print "RARPATH = %s" % test_env['RARPATH']
else :
	if with_ra:
		test_env.AppendUnique(LIBS = ['ra_xmpp'])

if test_env.get('SECURED') == '1':
    test_env.AppendUnique(LIBS = ['tinydtls'])
    test_env.AppendUnique(LIBS = ['timer'])
if test_env.get('DTLS_WITH_X509') == '1':
	test_env.AppendUnique(LIBS = ['CKManager'])
	test_env.AppendUnique(LIBS = ['asn1'])


if test_env.get('LOGGING'):
	test_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

######################################################################
# Source files and Targets
######################################################################
cxx_provisiontests = test_env.Program('provisiontests', ['OCProvisioningTest.cpp'])

Alias("provisiontests", [cxx_provisiontests])

env.Install(os.path.join(test_env.get('BUILD_DIR'), 'test'),  cxx_provisiontests)

test_env.AppendTarget('provisiontests')

#FIXME: run tests from somewhere else, this script is for building
# if test_env.get('TEST') == '1':
# 	if target_os in ['darwin', 'linux']:
# 		out_dir = test_env.get('BUILD_DIR')
# 		result_dir = os.path.join(test_env.get('BUILD_DIR'), 'test_out') + os.sep
# 		if not os.path.isdir(result_dir):
# 			os.makedirs(result_dir)
# 		test_env.AppendENVPath('GTEST_OUTPUT', ['xml:'+ result_dir])
# 		if target_os == 'darwin':
# 		    test_env.AppendENVPath('DYLD_LIBRARY_PATH', [out_dir])
# 		elif target_os == 'linux':
# 		    test_env.AppendENVPath('LD_LIBRARY_PATH', [out_dir])
# 		ut = test_env.Command ('ut', None, out_dir + 'resource/provisioning/unittests/provisiontests')
# 		AlwaysBuild ('ut')


#GAR samples FIXME: examples migrated to cxx sdk
# src_dir = test_env.get('SRC_DIR')
# svr_db_src_dir = src_dir + '/resource/provisioning/examples/'
# svr_db_build_dir = os.path.join(test_env.get('BUILD_DIR'), 'resource', 'provisioning', 'unittests')
# test_env.Alias("install", test_env.Install( svr_db_build_dir,
#                                 svr_db_src_dir + 'oic_svr_db_client.json'))


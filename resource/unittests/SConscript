#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('test_env')
import os
import os.path

src_dir = test_env.get('SRC_DIR')
target_os = test_env.get('TARGET_OS')

######################################################################
# Build flags
######################################################################
home = os.environ['HOME']

test_env.PrependUnique(CPPPATH = [
		'../include',
		'../oc_logger/include',
		'../csdk/cbor',
		'../csdk/stack/include',
		'../csdk/security/include',
		'../csdk/stack/include/internal',
		'../csdk/connectivity/api',
		'../csdk/connectivity/external/inc',
		'../csdk/ocsocket/include',
		'../c_common/ocrandom/include',
		'../csdk/logger/include',
		'#extlibs/hippomocks-master/HippoMocks',
		'#extlibs/hippomocks-master/HippoMocksTest'
		])

test_env.AppendUnique(LIBPATH = [test_env.get('BUILD_DIR')])

test_env.PrependUnique(LIBS = ['oc',
		               'octbstack',
		               'oc_logger',
		               'connectivity_abstraction',
		               'coap',
		               'gtest',
		               'gtest_main'])

if target_os != 'darwin':
        test_env.PrependUnique(LIBS = ['uuid'])

if test_env.get('SECURED') == '1':
    test_env.AppendUnique(LIBS = ['tinydtls'])

if test_env.get('LOGGING'):
	test_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if test_env.get('WITH_CLOUD'):
	test_env.AppendUnique(CPPDEFINES = ['WITH_CLOUD'])

######################################################################
# Source files and Targets
######################################################################
cxxtests = test_env.Program('cxxtests', ['ConstructResourceTest.cpp',
                                                'OCPlatformTest.cpp',
                                                'OCRepresentationTest.cpp',
                                                'OCRepresentationEncodingTest.cpp',
                                                'OCResourceTest.cpp',
                                                'OCExceptionTest.cpp',
                                                'OCResourceResponseTest.cpp',
                                                'OCHeaderOptionTest.cpp'])

Alias("cxxtests", [cxxtests])

test_env.AppendTarget('cxxtests')

test_env.Install(os.path.join(test_env.get('BUILD_DIR'), 'test'),  cxxtests)


# if env.get('WITH_VALGRIND'):
#         valgrind_xml = 'resource_cxxtests_cxxtests.memcheck'
# else:
#         valgrind_xml = ''

# import test_utils
# test_utils.run_test(test_env,
#                          valgrind_xml,
#                          'resource/cxxtests/cxxtests')

#GAR samples FIXME: disentagle samples and cxxtests
# src_dir = test_env.get('SRC_DIR')
# svr_db_src_dir = os.path.join(src_dir, 'resource/examples/')
# svr_db_build_dir = os.path.join(test_env.get('BUILD_DIR'), 'resource', 'cxxtests') + os.sep
# test_env.Alias("install",
#                     test_env.Install(svr_db_build_dir,
#                                           os.path.join(svr_db_src_dir,
#                                                        'oic_svr_db_client.dat')))


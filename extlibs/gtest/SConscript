##
# 'googletest' script to check if Google Unit Test library is installed.  If not,
# get it and install it
#
##

import os

Import('env')

target_os = env.get('TARGET_OS')
src_dir = env.get('SRC_DIR')

home = env.get('HOME')

targets_need_gtest = ['darwin','linux']
# gtest_dir      = src_dir + '/extlibs/gtest/' + target_os
gtest_dir      = home + '/.iotivity.d/gtest-1.7.0'
# gtest_zip_file = src_dir + '/extlibs/gtest/gtest-1.7.0.zip'
gtest_zip_file = home + '/.iotivity.d/gtest-1.7.0.zip'
gtest_url      = 'https://googletest.googlecode.com/files/gtest-1.7.0.zip'

print "gtest_dir", gtest_dir
print "gtest_zip_file", gtest_zip_file

if target_os in targets_need_gtest:
	print '*** Checking for installation of google unit test 1.7.0 ***'

	if not os.path.exists(gtest_dir):
		# If the gtest zip file is not already present, download it
		if not os.path.exists(gtest_zip_file):
			gtest_zip = env.Download(gtest_zip_file, gtest_url)
		else:
			gtest_zip = gtest_zip_file

		# Unzip gtest
		print 'Unzipping google unit test'
		env.UnpackAll(gtest_dir, gtest_zip)


if target_os == 'darwin':
	if os.path.exists(gtest_dir):
		if not os.path.exists(gtest_dir + "/lib"):
			# Run configure on gtest
			print 'Configuring google unit test'
			if env.get('CROSS_COMPILE'):
				env.Configure(gtest_dir, './configure --host=' + env['CROSS_COMPILE'])
			else:
				minver = '-mmacosx-version-min=' + env['SYS_VERSION']
				print "MINVER:", minver
			        env.Replace(CPPFLAGS = minver)
				env.Configure(gtest_dir,  './configure')

			# Run make on gtest
			print 'Making google unit test'
			env.Configure(gtest_dir, 'make')

elif target_os == 'linux':
	if os.path.exists(gtest_dir):
		if not os.path.exists(gtest_dir + "/lib"):
			# Run configure on gtest
			print 'Configuring google unit test'
			if env.get('CROSS_COMPILE'):
				env.Configure(gtest_dir, './configure --host=' + env['CROSS_COMPILE'])
			else:
				env.Configure(gtest_dir, './configure')

			# Run make on gtest
			print 'Making google unit test'
			env.Configure(gtest_dir, 'make')


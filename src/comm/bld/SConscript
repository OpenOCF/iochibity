##
# This script includes generic build options:
#    release/debug, target os, target arch, cross toolchain, build environment etc
##
import os
import platform

# Map of host os and allowed target os (host: allowed target os)
host_target_map = {
    'linux': ['linux', 'android', 'arduino', 'yocto', 'tizen'],
    'windows': ['windows', 'android', 'arduino'],
    'darwin': ['darwin', 'ios', 'android', 'arduino'],
}

# Map of os and allowed archs (os: allowed archs)
os_arch_map = {
    'linux': [
        'x86', 'x86_64', 'arm', 'arm64', 'mips', 'mipsel', 'mips64',
        'mips64el', 'i386', 'powerpc', 'sparc', 'aarch64'
    ],
    'tizen': ['x86', 'x86_64', 'arm', 'arm64'],
    'android': [
        'x86', 'x86_64', 'armeabi', 'armeabi-v7a', 'armeabi-v7a-hard',
        'arm64-v8a'
    ],
    'windows': ['x86', 'amd64', 'arm'],
    'darwin': ['i386', 'x86_64'],
    'ios': ['i386', 'x86_64', 'armv7', 'armv7s', 'arm64'],
    'arduino': ['avr', 'arm'],
    'yocto': [
        'i586', 'i686', 'x86_64', 'arm', 'aarch64', 'powerpc', 'powerpc64',
        'mips', 'mipsel'
    ],
}

host = platform.system().lower()

if host not in host_target_map:
    msg = "\nError: Current system (%s) isn't supported\n" % host
    Exit(msg)

######################################################################
# Get build options (the optins from command line)
######################################################################
target_os = ARGUMENTS.get('TARGET_OS', host).lower()  # target os

if target_os not in host_target_map[host]:
    msg = "\nError: Unknown target os: %s (Allow values: %s)\n" % (
        target_os, host_target_map[host])
    Exit(msg)

default_arch = platform.machine()

target_arch = ARGUMENTS.get('TARGET_ARCH', default_arch)  # target arch

# True if binary needs to be installed on board. (Might need root permissions)
# set to 'no', 'false' or 0 for only compilation
require_upload = ARGUMENTS.get('UPLOAD', True)

# Get the device name
device_name = ARGUMENTS.get('DEVICE_NAME', "OIC-DEVICE")

######################################################################
# Common build options (release, target os, target arch)
######################################################################
help_vars = Variables()
help_vars.Add(
    BoolVariable('RELEASE',
                 'Build for release?',
                 default=True))  # set to 'no', 'false' or 0 for debug
help_vars.Add(
    BoolVariable('LOGGING',
                 'Enable stack logging',
                 default=False))
help_vars.Add(
    EnumVariable('TARGET_OS',
                 'Target platform',
                 default=host,
                 allowed_values=host_target_map[host]))
help_vars.Add(
    ListVariable('TARGET_TRANSPORT',
                 'Target transport',
                 default='ALL',
                 names=['ALL', 'BT', 'BLE', 'IP']))
help_vars.Add(
    EnumVariable('TARGET_ARCH',
                 'Target architecture',
                 default=default_arch,
                 allowed_values=os_arch_map[target_os]))
help_vars.Add(
    EnumVariable('SECURED',
                 'Build with DTLS',
                 default='1',
                 allowed_values=('0', '1')))
help_vars.Add(
    BoolVariable('UPLOAD',
                 'Upload binary ? (For Arduino)',
                 default=require_upload))
help_vars.Add(
    EnumVariable('ROUTING',
                 'Enable routing',
                 default='EP',
                 allowed_values=('GW', 'EP')))
help_vars.Add(
    EnumVariable('BUILD_SAMPLE',
                 'Build with sample',
                 default='ON',
                 allowed_values=('ON', 'OFF')))
help_vars.Add(
    BoolVariable('WITH_TCP',
                 'Enable TCP',
                 default=False))
help_vars.Add(
    ListVariable('WITH_MQ',
                 'Build with MQ publisher/subscriber/broker',
                 default='OFF',
                 names=['OFF', 'SUB', 'PUB', 'BROKER']))

help_vars.AddVariables(
    ('DEVICE_NAME',
     'Network display name for device',
     'OIC-DEVICE',
     None,
     None), )

AddOption(
    '--prefix',
    dest='prefix',
    type='string',
    nargs=1,
    action='store',
    metavar='DIR',
    help='installation prefix')

######################################################################
# Platform(build target) specific options: SDK/NDK & toolchain
######################################################################
targets_support_cc = ['linux', 'arduino', 'tizen']

if target_os in targets_support_cc:
    # Set cross compile toolchain
    help_vars.Add('TC_PREFIX',
                  "Toolchain prefix (Generally only required for cross-compiling)",
                  default=os.environ.get('TC_PREFIX'))
    help_vars.Add(
        PathVariable('TC_PATH',
                     'Toolchain path (Generally only required for cross-compiling)',
                     default=os.environ.get('TC_PATH')))

if target_os in [
        'android', 'arduino'
]:  # Android/Arduino always uses GNU compiler regardless of the host
    env = Environment(
        variables=help_vars, tools=['gnulink', 'gcc', 'g++', 'ar', 'as'])
else:
    env = Environment(
        variables=help_vars,
        TARGET_ARCH=target_arch,
        TARGET_OS=target_os,
        PREFIX=GetOption('prefix'))

Help(help_vars.GenerateHelpText(env))

# Set device name to __OIC_DEVICE_NAME__
env.AppendUnique(
    CPPDEFINES=['-D__OIC_DEVICE_NAME__=' + "\'\"" + device_name + "\"\'"])

tc_set_msg = '''
************************************ Warning **********************************
*   Environment variable TC_PREFIX/TC_PATH is set. It will change the default *
* toolchain, if it isn't what you expect you should unset it, otherwise it may*
* cause inexplicable errors.                                                  *
*******************************************************************************
'''

if target_os in targets_support_cc:
    prefix = env.get('TC_PREFIX')
    tc_path = env.get('TC_PATH')
    if prefix:
        env.Replace(CC=prefix + 'gcc')
        env.Replace(CXX=prefix + 'g++')
        env.Replace(AR=prefix + 'ar')
        env.Replace(AS=prefix + 'as')
        env.Replace(LINK=prefix + 'ld')
        env.Replace(RANLIB=prefix + 'ranlib')

    if tc_path:
        env.PrependENVPath('PATH', tc_path)
        sys_root = os.path.abspath(tc_path + '/../')
        env.AppendUnique(CCFLAGS=['--sysroot=' + sys_root])
        env.AppendUnique(LINKFLAGS=['--sysroot=' + sys_root])

    if prefix or tc_path:
        print tc_set_msg

# Ensure scons be able to change its working directory
env.SConscriptChdir(1)

# Set the source directory and build directory
#   Source directory: 'dir'
#   Build directory: 'dir'/out/<target_os>/<target_arch>/<release or debug>/
#
# You can get the directory as following:
#   env.get('SRC_DIR')
#   env.get('BUILD_DIR')


def __set_dir(env, dir):
    if not os.path.exists(dir + '/SConstruct'):
        msg = '''
*************************************** Error *********************************
* The directory(%s) seems isn't a source code directory, no SConstruct file is
* found. *
*******************************************************************************
''' % dir
        Exit(msg)

    if env.get('RELEASE'):
        build_dir = os.path.join(
            dir, 'out', target_os, target_arch, 'release') + os.sep
    else:
        build_dir = os.path.join(
            dir, 'out', target_os, target_arch, 'debug') + os.sep
    env.VariantDir(build_dir, dir, duplicate=0)

    env.Replace(BUILD_DIR=build_dir)
    env.Replace(SRC_DIR=dir)


def __src_to_obj(env, src, home=''):
    obj = env.get('BUILD_DIR') + src.replace(home, '')
    if env.get('OBJSUFFIX'):
        obj += env.get('OBJSUFFIX')
    return env.Object(obj, src)


def __install(ienv, targets, name):
    i_n = ienv.Install(env.get('BUILD_DIR'), targets)
    Alias(name, i_n)
    env.AppendUnique(TS=[name])


def __installlib(ienv, targets, name):
    user_prefix = env.get('PREFIX')
    if user_prefix:
        install_lib_dir = os.path.join(user_prefix, 'lib')
    else:
        install_lib_dir = os.path.join(env.get('BUILD_DIR'), 'lib')
    i_n = ienv.Install(install_lib_dir, targets)
    ienv.Alias("install", i_n)


def __installbin(ienv, targets, name):
    user_prefix = env.get('PREFIX')
    if user_prefix:
        i_n = ienv.Install(user_prefix + '/bin', targets)
        ienv.Alias("install", i_n)


def __append_target(ienv, target):
    env.AppendUnique(TS=[target])


def __print_targets(env):
    Help('''
===============================================================================
Targets:\n    ''')
    for t in env.get('TS'):
        Help(t + ' ')
    Help('''
\nBy default all targets will be built. You can specify the target to build:

    $ scons [options] [target]
===============================================================================
''')


env.AddMethod(__set_dir, 'SetDir')
env.AddMethod(__print_targets, 'PrintTargets')
env.AddMethod(__src_to_obj, 'SrcToObj')
env.AddMethod(__append_target, 'AppendTarget')
env.AddMethod(__install, 'InstallTarget')
env.AddMethod(__installlib, 'UserInstallTargetLib')
env.AddMethod(__installbin, 'UserInstallTargetBin')
env.SetDir(env.GetLaunchDir())
env['ROOT_DIR'] = env.GetLaunchDir() + '/..'

Export('env')

######################################################################
# Link scons to Yocto cross-toolchain ONLY when target_os is yocto
######################################################################
if target_os == "yocto":
    '''
    This code injects Yocto cross-compilation tools+flags into scons'
    build environment in order to invoke the relevant tools while
    performing a build.
    '''
    import os.path
    try:
        CC = os.environ['CC']
        target_prefix = CC.split()[0]
        target_prefix = target_prefix[:-3]
        tools = {
            "CC": target_prefix + "gcc",
            "CXX": target_prefix + "g++",
            "AS": target_prefix + "as",
            "LD": target_prefix + "ld",
            "GDB": target_prefix + "gdb",
            "STRIP": target_prefix + "strip",
            "RANLIB": target_prefix + "ranlib",
            "OBJCOPY": target_prefix + "objcopy",
            "OBJDUMP": target_prefix + "objdump",
            "AR": target_prefix + "ar",
            "NM": target_prefix + "nm",
            "M4": "m4",
            "STRINGS": target_prefix + "strings"
        }
        PATH = os.environ['PATH'].split(os.pathsep)
        for tool in tools:
            if tool in os.environ:
                for path in PATH:
                    if os.path.isfile(os.path.join(path, tools[tool])):
                        env[tool] = os.path.join(path, os.environ[tool])
                        break
        env['CROSS_COMPILE'] = target_prefix[:-1]
    except:
        msg = "ERROR in Yocto cross-toolchain environment"
        Exit(msg)
    '''
    Now reset TARGET_OS to linux so that all linux specific build configurations
    hereupon apply for the entirety of the build process.
    '''
    env['TARGET_OS'] = 'linux'
    '''
    We want to preserve debug symbols to allow BitBake to generate both DEBUG and
    RELEASE packages for OIC.
    '''
    env.AppendUnique(CCFLAGS=['-g'])
    '''
    Additional flags to pass to the Yocto toolchain.
    '''
    if env.get('RELEASE'):
        env.AppendUnique(CPPDEFINES=['NDEBUG'])
    if env.get('LOGGING'):
        env.AppendUnique(CPPDEFINES=['TB_LOG'])
    env.AppendUnique(CPPDEFINES=['WITH_POSIX', '__linux__', '_GNU_SOURCE'])
    env.AppendUnique(CFLAGS=['-std=gnu99'])
    env.AppendUnique(CCFLAGS=['-Wall', '-fPIC'])
    if target_os in ['linux']:
        env.AppendUnique(LIBS=['dl', 'pthread'])
    Export('env')
else:
    '''
    If target_os is not Yocto, continue with the regular build process
    '''
    # Load config of target os
    if target_os in ['linux', 'tizen']:
        env.SConscript('linux/SConscript')
    else:
        env.SConscript(target_os + '/SConscript')

# Delete the temp files of configuration
if env.GetOption('clean'):
    dir = env.get('SRC_DIR')

    if os.path.exists(dir + '/config.log'):
        Execute(Delete(dir + '/config.log'))
        Execute(Delete(dir + '/.sconsign.dblite'))
        Execute(Delete(dir + '/.sconf_temp'))

Return('env')

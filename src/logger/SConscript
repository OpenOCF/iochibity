Import('env')
import os

build_dir = env.get('BUILD_DIR')

env.AppendUnique(CPPPATH=[
    os.path.join(Dir('.').abspath, 'include'),
    os.path.join('#', 'resource', 'c_common')
])

if env.get('TARGET_OS') in ['arduino']:
    env.AppendUnique(CPPPATH=[
        os.path.join(build_dir, 'resource', 'c_common', 'oic_string',
                     'include')
    ])
if env.get('TARGET_OS') == 'tizen':
    env.AppendUnique(LIBPATH=[build_dir])
else:
    env.AppendUnique(
        LIBPATH=[os.path.join(build_dir, 'resource', 'csdk', 'logger')])
if env.get('OIC_SUPPORT_TIZEN_TRACE') == 'True':
    env.AppendUnique(CPPDEFINES=['OIC_SUPPORT_TIZEN_TRACE'])

local_env = env.Clone()

######################################################################
# Source files and Targets
######################################################################

#TODO work-around: at the moment if an Arduino build is done the logger.c file
# ends up using C++ such as for the arduino Time Library, Serial, etc.
# Therefore we copy it to a .cpp name so it is compiled correctly.

if env.get('TARGET_OS') in ['arduino']:
    Command("./src/logger.cpp", "./src/logger.c", Copy("$TARGET", "$SOURCE"))
    logger_src = ['./src/logger.cpp']
else:
    logger_src = ['./src/logger.c', './src/trace.c']

loggerlib = local_env.StaticLibrary('logger', logger_src)
local_env.InstallTarget(loggerlib, 'logger')
local_env.UserInstallTargetHeader('include/experimental/logger_types.h', 
                                  'c_common/experimental', 'logger_types.h')
local_env.UserInstallTargetHeader('include/experimental/logger.h',
                                  'c_common/experimental', 'logger.h')

#######################################################################
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')
import os
import os.path

#GAR gtest
# # SConscript file for Local PKI google tests
# gtest_env = SConscript('#extlibs/gtest/SConscript')
enrollee_test_env = env.Clone()
src_dir = enrollee_test_env.get('SRC_DIR')
target_os = enrollee_test_env.get('TARGET_OS')

######################################################################
# Build flags
######################################################################

enrollee_test_env.PrependUnique(CPPPATH = [
		enrollee_test_env.get('SRC_DIR') + '/resource/c_common/ocrandom/include',
		enrollee_test_env.get('SRC_DIR') + '/resource/csdk/stack/include/internal',
		enrollee_test_env.get('SRC_DIR') + '/resource/csdk/connectivity/api',
		enrollee_test_env.get('SRC_DIR') + '/resource/c_common/oic_malloc/include',
		enrollee_test_env.get('SRC_DIR') + '/resource/include',
		enrollee_test_env.get('SRC_DIR') + '/resource/csdk/logger/include',
		enrollee_test_env.get('SRC_DIR') + '/resource/oc_logger/include',
     	enrollee_test_env.get('SRC_DIR') + '/resource/csdk/stack/include',
		enrollee_test_env.get('SRC_DIR') + '/resource/csdk/stack/include/internal',
        enrollee_test_env.get('SRC_DIR') + '/resource/csdk/logger/include',
		enrollee_test_env.get('SRC_DIR') + '/resource/csdk/security/include',
		enrollee_test_env.get('SRC_DIR') + '/extlibs/cjson',
		enrollee_test_env.get('SRC_DIR') + '/extlibs/sqlite3',
		enrollee_test_env.get('SRC_DIR') + '/service/easy-setup/inc',
		enrollee_test_env.get('SRC_DIR') + '/service/easy-setup/enrollee/linux/wifi',
		enrollee_test_env.get('SRC_DIR') + '/service/easy-setup/enrollee/inc',
		enrollee_test_env.get('SRC_DIR') + '/service/easy-setup/enrollee/src'])

enrollee_test_env.AppendUnique(LIBPATH = [enrollee_test_env.get('BUILD_DIR')])
enrollee_test_env.PrependUnique(LIBS = [ 'octbstack',
                                    'ocsrm',
                                    'connectivity_abstraction',
                                    'coap'])
if target_os not in ['windows']:
    enrollee_test_env.AppendUnique(LIBS = ['m'])

if target_os != 'darwin':
    enrollee_test_env.PrependUnique(LIBS = ['oc_logger'])

if enrollee_test_env.get('SECURED') == '1':
    enrollee_test_env.AppendUnique(LIBS = ['tinydtls'])

if enrollee_test_env.get('LOGGING'):
	enrollee_test_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if enrollee_test_env.get('ES_SOFTAP_MODE') == 'ENROLLEE_SOFTAP':
	print "ES_SOFTAP_MODE == ENROLLEE_SOFTAP"
	enrollee_test_env.AppendUnique(CPPDEFINES = ['ENROLLEE_SOFTAP'])

enrollee_test_env.PrependUnique(LIBS = ['ESEnrolleeSDK'])

######################################################################
# Source files and Targets
######################################################################
enrolleetests = enrollee_test_env.Program('enrolleetests', ['enrolleetests.cpp'])

Alias("test", [enrolleetests])

enrolleetests.AppendTarget('test')
if enrollee_test_env.get('TEST') == '1':
	if target_os in ['darwin, 'linux']:
                from tools.scons.RunTest import *
                run_test(enrollee_test_env,
                         '',
                         'service/easy-setup/enrollee/unittests/enrolleetests')


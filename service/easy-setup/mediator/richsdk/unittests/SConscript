#******************************************************************
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# Mediator[RichSDK] Unit Test build script
##
import os
Import('env')

if env.get('RELEASE'):
    env.AppendUnique(CCFLAGS = ['-Os'])
    env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
    env.AppendUnique(CCFLAGS = ['-g'])

if env.get('LOGGING'):
    env.AppendUnique(CPPDEFINES = ['TB_LOG'])

# Add third party libraries
lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')

target_os = env.get('TARGET_OS')

mediator_rich_test_env = lib_env.Clone()

######################################################################
#unit test setting
######################################################################
src_dir = lib_env.get('SRC_DIR')
# gtest_dir = src_dir + '/extlibs/gtest/' + target_os
home = lib_env.get('HOME')
gtest_dir = home + '/.iotivity.d/gtest-1.7.0'

######################################################################
# Build flags
######################################################################
# gtest = File(gtest_dir + '/lib/.libs/libgtest.a')
# gtest_main = File(gtest_dir + '/lib/.libs/libgtest_main.a')

mediator_rich_test_env.AppendUnique(
        CPPPATH = [
                src_dir + '/extlibs/hippomocks-master',
                gtest_dir + '/include',
                '../inc',
                '../../../inc',
        ])

mediator_rich_test_env.AppendUnique(LIBPATH = [gtest_dir + '/lib/.libs'])

if env.get('SECURED') == '1':
	     mediator_rich_test_env.PrependUnique(LIBS = ['tinydtls','ocprovision', 'ocpmapi', 'timer'])

mediator_rich_test_env.PrependUnique(LIBS = [
    'ESMediatorRich',
    'oc',
    'octbstack',
    'oc_logger',
    'gtest',
    'gtest_main'])

mediator_rich_test_env.AppendUnique(LIBS = ['dl'])

######################################################################
# Build Test
######################################################################
mediator_richsdk_test_src = env.Glob('./*.cpp')

mediator_richsdk_test = mediator_rich_test_env.Program('mediator_richsdk_test', mediator_richsdk_test_src)
Alias("mediator_richsdk_test", mediator_richsdk_test)
env.AppendTarget('mediator_richsdk_test')

if env.get('TEST') == '1':
    target_os = env.get('TARGET_OS')
    if target_os == 'linux':
        from tools.scons.RunTest import *
        run_test(mediator_rich_test_env, '', 'service/easy-setup/mediator/richsdk/unittests/mediator_richsdk_test')

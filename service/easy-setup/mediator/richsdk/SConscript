#******************************************************************
#
# Copyright 2016 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

######################################################################
# easy-setup Mediator C++[Rich] SDK build script
######################################################################
import os.path
Import('env')

easysetup_path = os.curdir

# Easysetup provides reference implemenation of Arduino Enrollee.
# Mediator applications developed on different platforms will be default defining the
# flag 'REMOTE_ARDUINO_ENROLEE'. If the target Enrollee is not Arduino, the below commented
# modifications must be enabled instead (and the existing define must be commented).
#
##### The following lines must be uncommented, if target Enrollee is not Arduino
target_enrollee = env.get('ES_TARGET_ENROLLEE')
if target_enrollee == 'arduino':
	print "REMOTE_ARDUINO_ENROLEE flag is defined."
	print "The Mediator application will be working only with Arduino Enrollee."
	env.AppendUnique(CPPDEFINES = ['REMOTE_ARDUINO_ENROLEE'])

# Add third party libraries
lib_env = env.Clone()
SConscript(Dir('#').abspath + '/service/third_party_libs.scons', 'lib_env')

easy_setup_env = lib_env.Clone()
target_os = env.get('TARGET_OS')

######################################################################
# Build flags
######################################################################
easy_setup_env.AppendUnique(CPPPATH = ['inc', 'src', '../../inc'])

if target_os in ['darwin','linux']:
   easy_setup_env.AppendUnique(LIBS = ['coap'])

if target_os in ['android']:
	easy_setup_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
	if env.get('SECURED') == '1':
		easy_setup_env.AppendUnique(LIBPATH = [Dir('#').abspath + '/android/android_api/base/libs/armeabi'])
	easy_setup_env.AppendUnique(RPATH = [env.get('BUILD_DIR')])
	easy_setup_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	easy_setup_env.PrependUnique(LIBS = ['oc', 'octbstack', 'oc_logger', 'connectivity_abstraction', 'gnustl_shared'])
	if env.get('SECURED') == '1':
		easy_setup_env.AppendUnique(LIBS = ['ocpmapi','ocprovision'])
	if not env.get('RELEASE'):
		easy_setup_env.AppendUnique(LIBS = ['log'])

if target_os in ['darwin','linux']:
	easy_setup_env.AppendUnique(LIBPATH = [env.get('BUILD_DIR')])
	easy_setup_env.AppendUnique(RPATH = [env.get('BUILD_DIR')])
	easy_setup_env.PrependUnique(LIBS = ['oc', 'octbstack', 'oc_logger'])
	if env.get('SECURED') == '1':
		easy_setup_env.AppendUnique(LIBS = ['ocpmapi', 'ocprovision'])

if target_os in ['android','linux','darwin']:
	easy_setup_env.PrependUnique(CPPPATH = [
		Dir('#').abspath + '/resource/c_common/oic_malloc/include',
		Dir('#').abspath + '/resource/include',
		Dir('#').abspath + '/resource/csdk/logger/include',
        	Dir('#').abspath + '/resource/csdk/stack/include',
        	Dir('#').abspath + '/resource/csdk/logger/include',
		Dir('#').abspath + '/resource/csdk/security/include',
		Dir('#').abspath + '/extlibs/cjson',
		Dir('#').abspath + '/extlibs/sqlite3',
		Dir('#').abspath + '/service/easy-setup/inc',
		'inc'])
	if env.get('SECURED') == '1':
		easy_setup_env.AppendUnique(CPPPATH = [
			Dir('#').abspath + '/resource/csdk/security/provisioning/include',
			Dir('#').abspath + '/resource/csdk/connectivity/api/',
	                Dir('#').abspath + '/resource/csdk/security/provisioning/include/internal',
			Dir('#').abspath + '/resource/csdk/security/provisioning/include/oxm'])

######################################################################
# Source files and Targets
######################################################################
es_src = None

if target_os in ['android','linux','darwin']:
	if env.get('SECURED') == '1':
		env.AppendUnique(es_src = [os.path.join(easysetup_path, 'src/EnrolleeSecurity.cpp')])

	es_common_src =	['src/RemoteEnrollee.cpp',
		'src/RemoteEnrolleeResource.cpp',
		'src/EasySetup.cpp',
		'src/ESException.cpp']

	env.AppendUnique(es_src = es_common_src)

	es_sdk_shared = easy_setup_env.SharedLibrary('ESMediatorRich', env.get('es_src'))
	easy_setup_env.InstallTarget(es_sdk_shared, 'libESMediatorRich')

######################################################################
#Build UnitTestcases for Mediator[RichSDK]
################################################ ######################
if target_os in ['darwin','linux']:
    SConscript('unittests/SConscript')

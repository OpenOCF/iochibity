##
# GroupManager build script
##

Import('env')

lib_env = env.Clone()
SConscript(env.get('SRC_DIR') + '/service/third_party_libs.scons', 'lib_env')
scenemanager_sample_env = lib_env.Clone()

######################################################################
# Build flags
######################################################################
scenemanager_sample_env.AppendUnique(CPPPATH = [
					     './../../include',
					     './../../src',
					     './../../../resource-encapsulation/include',
					     './../../../../extlibs/cjson',
					     './../../../../resource/csdk/connectivity/api'])

scenemanager_sample_env.AppendUnique(LIBS = [
    'oc_logger',
    'coap',
    'connectivity_abstraction',
    'scene_manager',
    'rcs_client',
    'rcs_server',
    'rcs_common',
    'octbstack',
    'oc',
    'pthread'
    ])

if env.get('SECURED') == '1':
    scenemanager_sample_env.AppendUnique(LIBS = ['tinydtls'])

if 'rt' in scenemanager_sample_env.get('LIBS'):
    scenemanager_sample_env.Append(LIBS = ['rt'])

target_os = env.get('TARGET_OS')
# if not env.get('RELEASE'):
#     if target_os != 'darwin':
#         scenemanager_sample_env.AppendUnique(CXXFLAGS = ['--coverage'])
#         scenemanager_sample_env.PrependUnique(LIBS = ['gcov'])
#     else:
#         # no -lgcov for os x
# 	scenemanager_sample_env.AppendUnique(CPPFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
# 	scenemanager_sample_env.PrependUnique(LIBS = ['clang_rt.profile_osx'])

# 	import subprocess
# 	p = subprocess.Popen(['clang', '-print-search-dirs'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
# 	out, err = p.communicate()
# 	libsline = out.splitlines()[1]
# 	clanglibs = libsline.split("libraries: =")[1]

# 	scenemanager_sample_env.PrependUnique(LIBPATH = [clanglibs + '/lib/darwin/'])

####################################################################
# Source files and Targets
######################################################################
sceneserver = scenemanager_sample_env.Program('sceneserver', 'sceneserver.cpp')
sceneclient = scenemanager_sample_env.Program('sceneclient', 'sceneclient.cpp')
fanserver = scenemanager_sample_env.Program('fanserver', 'fanserver.cpp')
lightserver = scenemanager_sample_env.Program('lightserver', 'lightserver.cpp')

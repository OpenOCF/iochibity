#******************************************************************
#
# Copyright 2015 Samsung Electronics All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# resource container build script
##
import os
Import('env')
import os.path

containerJavaSupport = ARGUMENTS.get('containerJavaSupport',0)

def filtered_glob(env, pattern, omit=[],
  ondisk=True, source=False, strings=False):
    return filter(
      lambda f: os.path.basename(f.path) not in omit,
      env.Glob(pattern))

env.AddMethod(filtered_glob, "FilteredGlob");

# Add third party libraries
lib_env = env.Clone()
SConscript('#service/third_party_libs.scons', exports = 'lib_env')

resource_container_env = lib_env.Clone()
target_os = env.get('TARGET_OS')
######################################################################
# Build flags
######################################################################

if int(containerJavaSupport):
    try:
        print 'Java Home: ', os.environ['JAVA_HOME']
        print 'Java Lib: ', os.environ['JAVA_LIB']
        resource_container_env.Append(CPPDEFINES={'JAVA_SUPPORT':1})
    except KeyError:
        print '''
    *********************************** Error *************************************
    * Building resource container without Java support. JAVA_HOME or JAVA_LIB are not set properly
    * Please configure JAVA_HOME to point to your Java 7 JDK and
    * JAVA_LIB to your folder containing libjvm
    * Example: export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
    *          export JAVA_LIB=/usr/lib/jvm/java-7-openjdk-i386/jre/lib/i386/server
    *******************************************************************************
        '''
        resource_container_env.Append(CPPDEFINES={'JAVA_SUPPORT':0})

resource_container_env.AppendUnique(
    CPPPATH = [
        env.get('SRC_DIR')+'/extlibs',
        '../resource-encapsulation/include',
        'include',
        'bundle-api/include',
        'src'
    ])

java_inc = [os.environ['JAVA_HOME'] + '/include'
	   ,os.environ['JAVA_HOME'] + '/include/' + target_os]

if int(containerJavaSupport):
    try:
        resource_container_env.AppendUnique(CPPPATH = java_inc)
    except KeyError:
        print ''

if target_os == 'android':
    resource_container_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
    resource_container_env.PrependUnique(LIBS = ['gnustl_shared', 'log'])

try:
    resource_container_env.AppendUnique(LIBPATH = [os.environ['JAVA_LIB']])
except KeyError:
    print ''

resource_container_env.PrependUnique(LIBS = ['coap'])
resource_container_env.AppendUnique(LIBS = ['connectivity_abstraction'])
resource_container_env.AppendUnique(LIBS = ['oc_logger'])
resource_container_env.AppendUnique(LIBS = ['octbstack'])
resource_container_env.AppendUnique(LIBS = ['oc'])
resource_container_env.AppendUnique(LIBS = ['rcs_client'])
resource_container_env.AppendUnique(LIBS = ['rcs_server'])
resource_container_env.AppendUnique(LIBS = ['rcs_common'])
resource_container_env.AppendUnique(LIBS = ['boost_system'])
resource_container_env.AppendUnique(LIBS = ['boost_date_time'])
resource_container_env.AppendUnique(LIBS = ['boost_thread'])

if int(containerJavaSupport):
    try:
        print 'Java Lib: ', os.environ['JAVA_LIB']
        resource_container_env.AppendUnique(LIBS = ['jvm'])
    except KeyError:
        print ''

######################################################################
# Source files and Targets
######################################################################
res_container_src = [ Glob('src/*.cpp') ]

res_container_static = resource_container_env.StaticLibrary('rcs_container', res_container_src)
res_container_shared = resource_container_env.SharedLibrary('rcs_container', res_container_src)

resource_container_env.InstallTarget([res_container_static,res_container_shared], 'libResContainer')
resource_container_env.UserInstallTargetLib([res_container_static,res_container_shared], 'libResContainer')

resource_container_env.UserInstallTargetHeader('include/RCSBundleInfo.h', 'service/resource-container', 'RCSBundleInfo.h')
resource_container_env.UserInstallTargetHeader('include/RCSResourceContainer.h', 'service/resource-container', 'RCSResourceContainer.h')

######################################################################
# build resource container unit tests
######################################################################
if target_os in ['linux']:  #GAR FIXME: 'darwin',
    SConscript('unittests/SConscript')

##
# This script set darwin specific flags (GNU GCC)
#
##
import os
Import('env')

print "Reading darwin configuration script"

#Find the SDK's that are installed
sdks=[]
for line in tc_sdks.split('\n'):
    if (line == ''):
        bIn=False
    if (line[:10] == 'OS X SDKs:'):
        bIn=(target_os == 'darwin')
    elif (line[:9] == 'iOS SDKs:'):
        bIn=(target_os == 'ios')
    elif bIn:
        sdks.append(line[:14].strip())

#find the latest
minsdk = '0.0'
maxsdk='10.10'    # Jenkins
if len(sdks) > 0:
    for sdk in sdks:
        p = sdk.rsplit(' ',1)[1]
        if (StrictVersion(p)) > StrictVersion(minsdk):
	   if (StrictVersion(p)) < StrictVersion(maxsdk):
               minsdk=p
	   else:
	       minsdk=maxsdk

### NOTE:
### $ sw_vers -productVersion
### 10.11.5

# SYS_VERSION build option

help_vars = Variables()
if env.get('BUILD_JAVA') == 'ON':
    if not env.get('ANDROID_GRADLE'):
        SConscript('../../extlibs/android/gradle/SConscript')
        help_vars.Add(PathVariable('ANDROID_GRADLE', 'Android Gradle directory', os.path.join(env.get('SRC_DIR'), 'extlibs', 'android', 'gradle', 'gradle-2.2.1/bin/gradle')))

    if env.get('ANDROID_GRADLE'):
        android_gradle = env.get('ANDROID_GRADLE')
    else:
        print '''
*************************************** Info **********************************
*    Android Gradle path isn't set, the default will be used. You can set     *
* environment variable ANDROID_GRADLE or add it in command line as:           *
*      # scons ANDROID_GRADLE=<path to android GRADLE> ...                    *
*******************************************************************************
'''
        android_gradle = os.path.join(env.get('SRC_DIR'), 'extlibs', 'android', 'gradle', 'gradle-2.2.1', 'bin', 'gradle')

help_vars.Update(env)
Help(help_vars.GenerateHelpText(env))


# Set release/debug flags
if env.get('RELEASE'):
	env.AppendUnique(CPPFLAGS = ['-Os'])
	env.AppendUnique(CPPDEFINES = ['NDEBUG'])
else:
	env.AppendUnique(CPPDEFINES = ['TB_LOG'])
	# no gcov, instead: http://llvm.org/docs/CommandGuide/llvm-cov.html
	env.AppendUnique(CPPFLAGS = ['-g', '-O0', '-fno-inline'])
	env.AppendUnique(CPPFLAGS = ['-fprofile-arcs', '-ftest-coverage'])
	env.AppendUnique(CPPFLAGS = ['-fprofile-instr-generate', '-fcoverage-mapping'])
	env.AppendUnique(LINKFLAGS = ['-fprofile-instr-generate'])
        env.PrependUnique(LIBS = ['clang_rt.profile_osx'])
	import subprocess
	p = subprocess.Popen(['clang', '-print-search-dirs'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = p.communicate()
	libsline = out.splitlines()[1]
	clangbin = libsline.split("libraries: =")[1]
	clanglib = libsline.split("libraries: =")[1]
	env.PrependUnique(GCOV = [clangbin + '/llvm-cov'])
	env.PrependUnique(LIBPATH = [clanglib + '/lib/darwin/'])

if env.get('LOGGING'):
	env.AppendUnique(CPPDEFINES = ['-DTB_LOG'])

env.AppendUnique(LINKFLAGS = ['-undefined', 'error'])
# env.Append(LINKFLAGS = ['-undefined', 'dynamic_lookup'])

env.AppendUnique(LINKFLAGS = ['-ldl', '-lpthread'])

env.AppendUnique(CPPFLAGS = ['-pthread'])

env.AppendUnique(CPPDEFINES = ['_DARWIN_C_SOURCE'])
env.AppendUnique(CPPDEFINES = ['WITH_POSIX', '__darwin__'])

env.AppendUnique(CXXFLAGS = ['-std=c++0x'])
env.AppendUnique(CFLAGS = ['-std=c11'])

env.AppendUnique(LIBS = ['uuid'])

# in case of ld: symbol(s) not found for architecture x86_64
# -Wl,-undefined -Wl,dynamic_lookup

# Set arch flags that match best TARGET_ARCH variable
target_arch = env.get('TARGET_ARCH')
if target_arch in ['x86']:
	env.AppendUnique(CCFLAGS = ['-m32'])
	env.AppendUnique(LINKFLAGS = ['-m32'])
elif target_arch in ['x86_64']:
	env.AppendUnique(CCFLAGS = ['-m64'])
	env.AppendUnique(LINKFLAGS = ['-m64'])
elif target_arch in ['arm'] or target_arch.find('v5') > 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv5te'])
elif target_arch.find('v7a-hard') > 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv7-a'])
	env.AppendUnique(CPPFLAGS = ['-mfloat-abi=hard'])
	env.AppendUnique(CCFLAGS = ['-mfloat-abi=hard'])
	env.AppendUnique(LINKFLAGS = ['-mfloat-abi=hard'])
elif target_arch.find('v7a') > 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv7-a'])
elif target_arch.find('arm64') >= 0:
	env.AppendUnique(CPPFLAGS = ['-march=armv8-a'])

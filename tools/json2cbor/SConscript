# //******************************************************************
# //
# // Copyright 2015 Samsung Electronics All Rights Reserved.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# //
# // Licensed under the Apache License, Version 2.0 (the "License");
# // you may not use this file except in compliance with the License.
# // You may obtain a copy of the License at
# //
# //      http://www.apache.org/licenses/LICENSE-2.0
# //
# // Unless required by applicable law or agreed to in writing, software
# // distributed under the License is distributed on an "AS IS" BASIS,
# // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# // See the License for the specific language governing permissions and
# // limitations under the License.
# //
# //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
Import('env')
import build.utils

print "TOOLS LIBPATH: ", env.get('LIBPATH');

tools_env = env.Clone()
build_sysroot = tools_env.get('BUILD_SYSROOT')
install_sysroot = tools_env.get('INSTALL_SYSROOT')

target_os = tools_env.get('TARGET_OS')

src_dir = tools_env.get('SRC_DIR')

flavor = env['ENV']['IOTIVITY_IMPLEMENTATION']

######################################################################
# Build flags
######################################################################
if flavor == 'IOTIVITY':
   CPPPATHS = ['../../../../extlibs/cjson',
               '../../stack/include',
               '../../stack/include/internal',
               '../../logger/include',
               '../../../oc_logger/include',
               '../../connectivity/api',
               '../include',
               '../include/internal',
               '../../connectivity/lib/libcoap-4.1.1']
   tools_env.PrependUnique(LIBS = ['oc', 'octbstack'])
elif flavor == 'IOCHIBITY':
   CPPPATHS = [src_dir + '/resource/csdk/cbor',
	       src_dir + '/resource/csdk/cjson',
	       src_dir + '/resource/c_common',
	       src_dir + '/resource/csdk/connectivity/lib/libcoap-4.1.1',
	       src_dir + '/resource/csdk/security',
	       src_dir + '/resource/csdk/security/ocsecurity',
	       src_dir + '/resource/csdk/connectivity/api',
	       src_dir + '/resource/csdk/stack',
	       src_dir + '/resource/csdk/stack/internal',
	       src_dir + '/resource/csdk/logger']
   tools_env.AppendUnique(LIBPATH = [install_sysroot + '/lib',
                                     build_sysroot + '/csdk'])
   tools_env.PrependUnique(LIBS = ['chibity', 'csdk'])

if target_os in ['linux']:
   tools_env.AppendUnique(LIBS = ['m', 'uuid'])


tools_env.PrependUnique(CPPPATH = CPPPATHS)
tools_env.AppendUnique(CFLAGS = ['-O2', '-g', '-Wall', '-Wextra', '-std=c11'])
tools_env.AppendUnique(RPATH = [env.get('BUILD_DIR')])


######################################################################
# Source files and Targets
######################################################################
json2cbor = tools_env.Program('json2cbor', ['json2cbor.c'])
Alias("json2cbor", [json2cbor])
build.utils.install_bin(tools_env, json2cbor,   'tools')

# env.AppendTarget('json2cbor')

cbordump = tools_env.Program('cbordump', ['cbordump.c'])
Alias("cbordump", [cbordump])
build.utils.install_bin(tools_env, cbordump,   'tools')

# env.AppendTarget('cbordump')
